-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_hw_input_stencil_stream_V_value_V_dout : IN STD_LOGIC_VECTOR (287 downto 0);
    p_hw_input_stencil_stream_V_value_V_empty_n : IN STD_LOGIC;
    p_hw_input_stencil_stream_V_value_V_read : OUT STD_LOGIC;
    hw_output_V_value_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    hw_output_V_value_V_ap_vld : OUT STD_LOGIC;
    hw_output_V_value_V_ap_ack : IN STD_LOGIC;
    hw_output_V_last_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    hw_output_V_last_V_ap_vld : OUT STD_LOGIC;
    hw_output_V_last_V_ap_ack : IN STD_LOGIC );
end;


architecture behav of Loop_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv21_1F8C94 : STD_LOGIC_VECTOR (20 downto 0) := "111111000110010010100";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv11_77E : STD_LOGIC_VECTOR (10 downto 0) := "11101111110";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_435 : STD_LOGIC_VECTOR (10 downto 0) := "10000110101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_E6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100110";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_107 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000111";
    constant ap_const_lv11_77D : STD_LOGIC_VECTOR (10 downto 0) := "11101111101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_hw_input_stencil_stream_V_value_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal exitcond_flatten_reg_465 : STD_LOGIC_VECTOR (0 downto 0);
    signal hw_output_V_value_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_465 : STD_LOGIC_VECTOR (0 downto 0);
    signal hw_output_V_last_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_126 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_hw_output_y_scan_1_reg_137 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_x_scan_2_reg_149 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_flatten_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_sig_ioackin_hw_output_V_value_V_ap_ack : STD_LOGIC;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_465 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_465 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_166_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond8_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_reg_474 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond8_reg_474 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond8_reg_474 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_hw_output_x_scan_s_fu_178_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_x_scan_s_reg_480 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_x_scan_1_fu_186_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_y_scan_2_fu_192_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_y_scan_2_reg_490 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp5_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp5_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_hw_output_y_scan_s_fu_204_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_hw_output_y_scan_s_reg_500 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_357_fu_241_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_357_reg_505 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_283_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_reg_510 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_reg_515 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp0_iter2_tmp_4_reg_515 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_reg_520 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp4_fu_345_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_reg_525 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_402_reg_530 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter2_p_402_reg_530 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter3_p_402_reg_530 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_535 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_s_reg_535 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid1_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid1_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_371_fu_377_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_371_reg_545 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_fu_397_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_reg_550 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_399_fu_431_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_399_reg_555 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_last_V_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_560 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal p_hw_output_y_scan_1_phi_fu_141_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal ap_reg_ioackin_hw_output_V_value_V_ap_ack : STD_LOGIC := '0';
    signal ap_reg_ioackin_hw_output_V_last_V_ap_ack : STD_LOGIC := '0';
    signal p_346_fu_211_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_219_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_355_fu_229_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_356_cast_fu_237_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_349_cast_fu_215_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_360_fu_247_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_261_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_369_fu_271_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_370_cast_cast_fu_279_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_363_cast_cast_fu_257_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_388_fu_309_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_323_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_397_fu_333_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_398_cast_cast_fu_341_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_391_cast_cast_fu_319_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_357_cast_fu_371_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_cast_fu_374_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_383_fu_383_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_384_cast_cast_fu_390_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp4_cast_fu_394_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_376_fu_411_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_377_cast_fu_418_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_371_cast_fu_408_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_422_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp3_cast_fu_428_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_mid2_fu_403_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_405_cast_fu_445_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_399_cast_fu_442_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_406_fu_448_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_hw_output_V_last_V_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_465))) then
                    if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_hw_output_V_last_V_ap_ack <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_1 = hw_output_V_last_V_ap_ack))) then 
                        ap_reg_ioackin_hw_output_V_last_V_ap_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_hw_output_V_value_V_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_465))) then
                    if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_1 = hw_output_V_value_V_ap_ack))) then 
                        ap_reg_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_160_p2))) then 
                indvar_flatten_reg_126 <= indvar_flatten_next_fu_166_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                indvar_flatten_reg_126 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    p_hw_output_x_scan_2_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_160_p2))) then 
                p_hw_output_x_scan_2_reg_149 <= p_hw_output_x_scan_1_fu_186_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                p_hw_output_x_scan_2_reg_149 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    p_hw_output_y_scan_1_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_465) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
                p_hw_output_y_scan_1_reg_137 <= p_hw_output_y_scan_s_reg_500;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                p_hw_output_y_scan_1_reg_137 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond8_reg_474 <= exitcond8_reg_474;
                ap_reg_pp0_iter1_exitcond_flatten_reg_465 <= exitcond_flatten_reg_465;
                exitcond_flatten_reg_465 <= exitcond_flatten_fu_160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter2_exitcond8_reg_474 <= ap_reg_pp0_iter1_exitcond8_reg_474;
                ap_reg_pp0_iter2_exitcond_flatten_reg_465 <= ap_reg_pp0_iter1_exitcond_flatten_reg_465;
                ap_reg_pp0_iter2_p_402_reg_530 <= p_402_reg_530;
                ap_reg_pp0_iter2_tmp5_reg_495 <= tmp5_reg_495;
                ap_reg_pp0_iter2_tmp_4_reg_515 <= tmp_4_reg_515;
                ap_reg_pp0_iter2_tmp_s_reg_535 <= tmp_s_reg_535;
                ap_reg_pp0_iter3_exitcond_flatten_reg_465 <= ap_reg_pp0_iter2_exitcond_flatten_reg_465;
                ap_reg_pp0_iter3_p_402_reg_530 <= ap_reg_pp0_iter2_p_402_reg_530;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_160_p2))) then
                exitcond8_reg_474 <= exitcond8_fu_172_p2;
                p_hw_output_x_scan_s_reg_480 <= p_hw_output_x_scan_s_fu_178_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_465 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                p_357_reg_505 <= p_357_fu_241_p2;
                p_402_reg_530 <= p_hw_input_stencil_stream_V_value_V_dout(263 downto 256);
                p_hw_output_y_scan_2_reg_490 <= p_hw_output_y_scan_2_fu_192_p2;
                tmp1_reg_510 <= tmp1_fu_283_p2;
                tmp4_reg_525 <= tmp4_fu_345_p2;
                tmp_4_reg_515 <= p_hw_input_stencil_stream_V_value_V_dout(133 downto 128);
                tmp_5_reg_520 <= p_hw_input_stencil_stream_V_value_V_dout(166 downto 160);
                tmp_s_reg_535 <= tmp_s_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_465))) then
                p_371_reg_545 <= p_371_fu_377_p2;
                tmp3_reg_550 <= tmp3_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_465))) then
                p_399_reg_555 <= p_399_fu_431_p2;
                tmp_last_V_reg_560 <= tmp_last_V_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_465 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                p_hw_output_y_scan_s_reg_500 <= p_hw_output_y_scan_s_fu_204_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_465 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond8_reg_474))) then
                tmp5_reg_495 <= tmp5_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_465) and (ap_reg_pp0_iter1_exitcond8_reg_474 = ap_const_lv1_1))) then
                tmp_mid1_reg_540 <= tmp_mid1_fu_366_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, exitcond_flatten_fu_160_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_160_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_160_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_465)
    begin
                ap_block_pp0_stage0_flag00001001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_465 = ap_const_lv1_0) and (ap_const_logic_0 = p_hw_input_stencil_stream_V_value_V_empty_n));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_465, ap_enable_reg_pp0_iter4, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_465 = ap_const_lv1_0) and (ap_const_logic_0 = p_hw_input_stencil_stream_V_value_V_empty_n)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_boolean_1 = ap_block_state6_io)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_465, ap_enable_reg_pp0_iter4, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_465 = ap_const_lv1_0) and (ap_const_logic_0 = p_hw_input_stencil_stream_V_value_V_empty_n)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_boolean_1 = ap_block_state6_io)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, exitcond_flatten_reg_465)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond_flatten_reg_465 = ap_const_lv1_0) and (ap_const_logic_0 = p_hw_input_stencil_stream_V_value_V_empty_n));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(ap_reg_pp0_iter3_exitcond_flatten_reg_465, ap_sig_ioackin_hw_output_V_value_V_ap_ack)
    begin
                ap_block_state6_io <= ((ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_465) and (ap_const_logic_0 = ap_sig_ioackin_hw_output_V_value_V_ap_ack));
    end process;

        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_160_p2)
    begin
        if ((exitcond_flatten_fu_160_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_hw_output_V_value_V_ap_ack_assign_proc : process(hw_output_V_value_V_ap_ack, ap_reg_ioackin_hw_output_V_value_V_ap_ack)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_hw_output_V_value_V_ap_ack)) then 
            ap_sig_ioackin_hw_output_V_value_V_ap_ack <= hw_output_V_value_V_ap_ack;
        else 
            ap_sig_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_1;
        end if; 
    end process;

    exitcond8_fu_172_p2 <= "1" when (p_hw_output_x_scan_2_reg_149 = ap_const_lv11_77E) else "0";
    exitcond_flatten_fu_160_p2 <= "1" when (indvar_flatten_reg_126 = ap_const_lv21_1F8C94) else "0";
    hw_output_V_last_V <= tmp_last_V_reg_560;

    hw_output_V_last_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_reg_pp0_iter3_exitcond_flatten_reg_465, ap_block_pp0_stage0_flag00001001, ap_reg_ioackin_hw_output_V_last_V_ap_ack)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_465) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_hw_output_V_last_V_ap_ack))) then 
            hw_output_V_last_V_ap_vld <= ap_const_logic_1;
        else 
            hw_output_V_last_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    hw_output_V_last_V_blk_n_assign_proc : process(hw_output_V_last_V_ap_ack, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter4, ap_reg_pp0_iter3_exitcond_flatten_reg_465)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_465))) then 
            hw_output_V_last_V_blk_n <= hw_output_V_last_V_ap_ack;
        else 
            hw_output_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hw_output_V_value_V <= p_406_fu_448_p2(11 downto 4);

    hw_output_V_value_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_reg_pp0_iter3_exitcond_flatten_reg_465, ap_block_pp0_stage0_flag00001001, ap_reg_ioackin_hw_output_V_value_V_ap_ack)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_465) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_hw_output_V_value_V_ap_ack))) then 
            hw_output_V_value_V_ap_vld <= ap_const_logic_1;
        else 
            hw_output_V_value_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    hw_output_V_value_V_blk_n_assign_proc : process(hw_output_V_value_V_ap_ack, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter4, ap_reg_pp0_iter3_exitcond_flatten_reg_465)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_465))) then 
            hw_output_V_value_V_blk_n <= hw_output_V_value_V_ap_ack;
        else 
            hw_output_V_value_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    indvar_flatten_next_fu_166_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_126) + unsigned(ap_const_lv21_1));
    p_346_fu_211_p1 <= p_hw_input_stencil_stream_V_value_V_dout(8 - 1 downto 0);
    p_349_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_346_fu_211_p1),9));
    p_355_fu_229_p3 <= (tmp_2_fu_219_p4 & ap_const_lv1_0);
    p_356_cast_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_355_fu_229_p3),9));
    p_357_cast_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_357_reg_505),10));
    p_357_fu_241_p2 <= std_logic_vector(unsigned(p_356_cast_fu_237_p1) + unsigned(p_349_cast_fu_215_p1));
    p_360_fu_247_p4 <= p_hw_input_stencil_stream_V_value_V_dout(71 downto 64);
    p_363_cast_cast_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_360_fu_247_p4),9));
    p_369_fu_271_p3 <= (tmp_3_fu_261_p4 & ap_const_lv1_0);
    p_370_cast_cast_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_369_fu_271_p3),9));
    p_371_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_371_reg_545),11));
    p_371_fu_377_p2 <= std_logic_vector(unsigned(p_357_cast_fu_371_p1) + unsigned(tmp1_cast_fu_374_p1));
    p_376_fu_411_p3 <= (ap_reg_pp0_iter2_tmp_4_reg_515 & ap_const_lv2_0);
    p_377_cast_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_376_fu_411_p3),11));
    p_383_fu_383_p3 <= (tmp_5_reg_520 & ap_const_lv1_0);
    p_384_cast_cast_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_383_fu_383_p3),10));
    p_388_fu_309_p4 <= p_hw_input_stencil_stream_V_value_V_dout(199 downto 192);
    p_391_cast_cast_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_388_fu_309_p4),9));
    p_397_fu_333_p3 <= (tmp_6_fu_323_p4 & ap_const_lv1_0);
    p_398_cast_cast_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_397_fu_333_p3),9));
    p_399_cast_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_399_reg_555),12));
    p_399_fu_431_p2 <= std_logic_vector(unsigned(tmp2_fu_422_p2) + unsigned(tmp3_cast_fu_428_p1));
    p_405_cast_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter3_p_402_reg_530),12));
    p_406_fu_448_p2 <= std_logic_vector(unsigned(p_405_cast_fu_445_p1) + unsigned(p_399_cast_fu_442_p1));

    p_hw_input_stencil_stream_V_value_V_blk_n_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond_flatten_reg_465)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_flatten_reg_465 = ap_const_lv1_0))) then 
            p_hw_input_stencil_stream_V_value_V_blk_n <= p_hw_input_stencil_stream_V_value_V_empty_n;
        else 
            p_hw_input_stencil_stream_V_value_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_hw_input_stencil_stream_V_value_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_465, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_465 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            p_hw_input_stencil_stream_V_value_V_read <= ap_const_logic_1;
        else 
            p_hw_input_stencil_stream_V_value_V_read <= ap_const_logic_0;
        end if; 
    end process;

    p_hw_output_x_scan_1_fu_186_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(p_hw_output_x_scan_s_fu_178_p3));
    p_hw_output_x_scan_s_fu_178_p3 <= 
        ap_const_lv11_0 when (exitcond8_fu_172_p2(0) = '1') else 
        p_hw_output_x_scan_2_reg_149;

    p_hw_output_y_scan_1_phi_fu_141_p4_assign_proc : process(ap_block_pp0_stage0_flag00000000, p_hw_output_y_scan_1_reg_137, ap_reg_pp0_iter1_exitcond_flatten_reg_465, p_hw_output_y_scan_s_reg_500, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_465) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            p_hw_output_y_scan_1_phi_fu_141_p4 <= p_hw_output_y_scan_s_reg_500;
        else 
            p_hw_output_y_scan_1_phi_fu_141_p4 <= p_hw_output_y_scan_1_reg_137;
        end if; 
    end process;

    p_hw_output_y_scan_2_fu_192_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(p_hw_output_y_scan_1_phi_fu_141_p4));
    p_hw_output_y_scan_s_fu_204_p3 <= 
        p_hw_output_y_scan_2_fu_192_p2 when (exitcond8_reg_474(0) = '1') else 
        p_hw_output_y_scan_1_phi_fu_141_p4;
    tmp1_cast_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_reg_510),10));
    tmp1_fu_283_p2 <= std_logic_vector(unsigned(p_370_cast_cast_fu_279_p1) + unsigned(p_363_cast_cast_fu_257_p1));
    tmp2_fu_422_p2 <= std_logic_vector(unsigned(p_377_cast_fu_418_p1) + unsigned(p_371_cast_fu_408_p1));
    tmp3_cast_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_reg_550),11));
    tmp3_fu_397_p2 <= std_logic_vector(unsigned(p_384_cast_cast_fu_390_p1) + unsigned(tmp4_cast_fu_394_p1));
    tmp4_cast_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_reg_525),10));
    tmp4_fu_345_p2 <= std_logic_vector(unsigned(p_398_cast_cast_fu_341_p1) + unsigned(p_391_cast_cast_fu_319_p1));
    tmp5_fu_198_p2 <= "1" when (p_hw_output_y_scan_1_phi_fu_141_p4 = ap_const_lv11_435) else "0";
    tmp_2_fu_219_p4 <= p_hw_input_stencil_stream_V_value_V_dout(38 downto 32);
    tmp_3_fu_261_p4 <= p_hw_input_stencil_stream_V_value_V_dout(102 downto 96);
    tmp_6_fu_323_p4 <= p_hw_input_stencil_stream_V_value_V_dout(230 downto 224);
    tmp_last_V_fu_437_p2 <= (ap_reg_pp0_iter2_tmp_s_reg_535 and tmp_mid2_fu_403_p3);
    tmp_mid1_fu_366_p2 <= "1" when (p_hw_output_y_scan_2_reg_490 = ap_const_lv11_435) else "0";
    tmp_mid2_fu_403_p3 <= 
        tmp_mid1_reg_540 when (ap_reg_pp0_iter2_exitcond8_reg_474(0) = '1') else 
        ap_reg_pp0_iter2_tmp5_reg_495;
    tmp_s_fu_361_p2 <= "1" when (p_hw_output_x_scan_s_reg_480 = ap_const_lv11_77D) else "0";
end behav;
