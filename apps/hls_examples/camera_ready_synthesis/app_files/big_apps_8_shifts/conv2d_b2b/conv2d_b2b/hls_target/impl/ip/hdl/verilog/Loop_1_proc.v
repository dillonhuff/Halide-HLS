// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        p_hw_input_stencil_stream_V_value_V_dout,
        p_hw_input_stencil_stream_V_value_V_empty_n,
        p_hw_input_stencil_stream_V_value_V_read,
        p_mul_stencil_update_stream_V_value_V_din,
        p_mul_stencil_update_stream_V_value_V_full_n,
        p_mul_stencil_update_stream_V_value_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
input  [71:0] p_hw_input_stencil_stream_V_value_V_dout;
input   p_hw_input_stencil_stream_V_value_V_empty_n;
output   p_hw_input_stencil_stream_V_value_V_read;
output  [31:0] p_mul_stencil_update_stream_V_value_V_din;
input   p_mul_stencil_update_stream_V_value_V_full_n;
output   p_mul_stencil_update_stream_V_value_V_write;

reg ap_done;
reg ap_idle;
reg p_hw_input_stencil_stream_V_value_V_read;
reg p_mul_stencil_update_stream_V_value_V_write;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg    p_hw_input_stencil_stream_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_354;
reg    p_mul_stencil_update_stream_V_value_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_354;
reg   [20:0] indvar_flatten_reg_103;
wire   [0:0] exitcond_flatten_fu_114_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_354;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_354;
wire   [20:0] indvar_flatten_next_fu_120_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] p_391_reg_363;
reg   [7:0] ap_reg_pp0_iter2_p_391_reg_363;
reg   [7:0] ap_reg_pp0_iter3_p_391_reg_363;
wire   [8:0] p_341_fu_194_p2;
reg   [8:0] p_341_reg_368;
wire   [8:0] tmp1_fu_222_p2;
reg   [8:0] tmp1_reg_373;
reg   [5:0] tmp_8_reg_378;
reg   [5:0] ap_reg_pp0_iter2_tmp_8_reg_378;
reg   [6:0] tmp_9_reg_383;
wire   [8:0] tmp4_fu_270_p2;
reg   [8:0] tmp4_reg_388;
wire   [9:0] p_357_fu_282_p2;
reg   [9:0] p_357_reg_393;
wire   [9:0] tmp3_fu_302_p2;
reg   [9:0] tmp3_reg_398;
wire   [10:0] p_389_fu_331_p2;
reg   [10:0] p_389_reg_403;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_pp0_stage0_flag00001001;
wire   [7:0] p_327_fu_126_p1;
wire   [7:0] p_343_fu_134_p4;
wire   [7:0] p_375_fu_148_p4;
wire   [6:0] tmp_6_fu_172_p4;
wire   [7:0] p_339_fu_182_p3;
wire   [8:0] p_332_cast_fu_130_p1;
wire   [8:0] p_340_cast_fu_190_p1;
wire   [6:0] tmp_7_fu_200_p4;
wire   [7:0] p_355_fu_210_p3;
wire   [8:0] p_356_cast_cast_fu_218_p1;
wire   [8:0] p_348_cast_cast_fu_144_p1;
wire   [6:0] tmp_s_fu_248_p4;
wire   [7:0] p_387_fu_258_p3;
wire   [8:0] p_388_cast_cast_fu_266_p1;
wire   [8:0] p_380_cast_cast_fu_158_p1;
wire   [9:0] p_341_cast_fu_276_p1;
wire   [9:0] tmp1_cast_fu_279_p1;
wire   [7:0] p_371_fu_288_p3;
wire   [9:0] p_372_cast_cast_fu_295_p1;
wire   [9:0] tmp4_cast_fu_299_p1;
wire   [7:0] p_363_fu_311_p3;
wire   [10:0] p_364_cast_fu_318_p1;
wire   [10:0] p_357_cast_fu_308_p1;
wire   [10:0] tmp2_fu_322_p2;
wire   [10:0] tmp3_cast_fu_328_p1;
wire   [11:0] p_396_cast_fu_337_p1;
wire   [11:0] p_389_cast_fu_340_p1;
wire   [11:0] p_397_fu_343_p2;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_114_p2))) begin
        indvar_flatten_reg_103 <= indvar_flatten_next_fu_120_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_103 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_354 <= exitcond_flatten_reg_354;
        exitcond_flatten_reg_354 <= exitcond_flatten_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_exitcond_flatten_reg_354 <= ap_reg_pp0_iter1_exitcond_flatten_reg_354;
        ap_reg_pp0_iter2_p_391_reg_363 <= p_391_reg_363;
        ap_reg_pp0_iter2_tmp_8_reg_378 <= tmp_8_reg_378;
        ap_reg_pp0_iter3_exitcond_flatten_reg_354 <= ap_reg_pp0_iter2_exitcond_flatten_reg_354;
        ap_reg_pp0_iter3_p_391_reg_363 <= ap_reg_pp0_iter2_p_391_reg_363;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_354 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_341_reg_368 <= p_341_fu_194_p2;
        p_391_reg_363 <= {{p_hw_input_stencil_stream_V_value_V_dout[71:64]}};
        tmp1_reg_373 <= tmp1_fu_222_p2;
        tmp4_reg_388 <= tmp4_fu_270_p2;
        tmp_8_reg_378 <= {{p_hw_input_stencil_stream_V_value_V_dout[37:32]}};
        tmp_9_reg_383 <= {{p_hw_input_stencil_stream_V_value_V_dout[46:40]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_354))) begin
        p_357_reg_393 <= p_357_fu_282_p2;
        tmp3_reg_398 <= tmp3_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_354))) begin
        p_389_reg_403 <= p_389_fu_331_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_114_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_354 == 1'd0))) begin
        p_hw_input_stencil_stream_V_value_V_blk_n = p_hw_input_stencil_stream_V_value_V_empty_n;
    end else begin
        p_hw_input_stencil_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_354 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_input_stencil_stream_V_value_V_read = 1'b1;
    end else begin
        p_hw_input_stencil_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_354))) begin
        p_mul_stencil_update_stream_V_value_V_blk_n = p_mul_stencil_update_stream_V_value_V_full_n;
    end else begin
        p_mul_stencil_update_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_354) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_mul_stencil_update_stream_V_value_V_write = 1'b1;
    end else begin
        p_mul_stencil_update_stream_V_value_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_114_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_114_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_354 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_354) & (1'b0 == p_mul_stencil_update_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_354 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_354) & (1'b0 == p_mul_stencil_update_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_354 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_354) & (1'b0 == p_mul_stencil_update_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten_reg_354 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_354) & (1'b0 == p_mul_stencil_update_stream_V_value_V_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten_fu_114_p2 = ((indvar_flatten_reg_103 == 21'd2067604) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_120_p2 = (indvar_flatten_reg_103 + 21'd1);

assign p_327_fu_126_p1 = p_hw_input_stencil_stream_V_value_V_dout[7:0];

assign p_332_cast_fu_130_p1 = p_327_fu_126_p1;

assign p_339_fu_182_p3 = {{tmp_6_fu_172_p4}, {1'd0}};

assign p_340_cast_fu_190_p1 = p_339_fu_182_p3;

assign p_341_cast_fu_276_p1 = p_341_reg_368;

assign p_341_fu_194_p2 = (p_332_cast_fu_130_p1 + p_340_cast_fu_190_p1);

assign p_343_fu_134_p4 = {{p_hw_input_stencil_stream_V_value_V_dout[23:16]}};

assign p_348_cast_cast_fu_144_p1 = p_343_fu_134_p4;

assign p_355_fu_210_p3 = {{tmp_7_fu_200_p4}, {1'd0}};

assign p_356_cast_cast_fu_218_p1 = p_355_fu_210_p3;

assign p_357_cast_fu_308_p1 = p_357_reg_393;

assign p_357_fu_282_p2 = (p_341_cast_fu_276_p1 + tmp1_cast_fu_279_p1);

assign p_363_fu_311_p3 = {{ap_reg_pp0_iter2_tmp_8_reg_378}, {2'd0}};

assign p_364_cast_fu_318_p1 = p_363_fu_311_p3;

assign p_371_fu_288_p3 = {{tmp_9_reg_383}, {1'd0}};

assign p_372_cast_cast_fu_295_p1 = p_371_fu_288_p3;

assign p_375_fu_148_p4 = {{p_hw_input_stencil_stream_V_value_V_dout[55:48]}};

assign p_380_cast_cast_fu_158_p1 = p_375_fu_148_p4;

assign p_387_fu_258_p3 = {{tmp_s_fu_248_p4}, {1'd0}};

assign p_388_cast_cast_fu_266_p1 = p_387_fu_258_p3;

assign p_389_cast_fu_340_p1 = p_389_reg_403;

assign p_389_fu_331_p2 = (tmp2_fu_322_p2 + tmp3_cast_fu_328_p1);

assign p_396_cast_fu_337_p1 = ap_reg_pp0_iter3_p_391_reg_363;

assign p_397_fu_343_p2 = (p_396_cast_fu_337_p1 + p_389_cast_fu_340_p1);

assign p_mul_stencil_update_stream_V_value_V_din = p_397_fu_343_p2;

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

assign tmp1_cast_fu_279_p1 = tmp1_reg_373;

assign tmp1_fu_222_p2 = (p_356_cast_cast_fu_218_p1 + p_348_cast_cast_fu_144_p1);

assign tmp2_fu_322_p2 = (p_364_cast_fu_318_p1 + p_357_cast_fu_308_p1);

assign tmp3_cast_fu_328_p1 = tmp3_reg_398;

assign tmp3_fu_302_p2 = (p_372_cast_cast_fu_295_p1 + tmp4_cast_fu_299_p1);

assign tmp4_cast_fu_299_p1 = tmp4_reg_388;

assign tmp4_fu_270_p2 = (p_388_cast_cast_fu_266_p1 + p_380_cast_cast_fu_158_p1);

assign tmp_6_fu_172_p4 = {{p_hw_input_stencil_stream_V_value_V_dout[14:8]}};

assign tmp_7_fu_200_p4 = {{p_hw_input_stencil_stream_V_value_V_dout[30:24]}};

assign tmp_s_fu_248_p4 = {{p_hw_input_stencil_stream_V_value_V_dout[62:56]}};

endmodule //Loop_1_proc
