-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_hw_input_stencil_stream_V_value_V_dout : IN STD_LOGIC_VECTOR (71 downto 0);
    p_hw_input_stencil_stream_V_value_V_empty_n : IN STD_LOGIC;
    p_hw_input_stencil_stream_V_value_V_read : OUT STD_LOGIC;
    hw_output_V_value_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    hw_output_V_value_V_ap_vld : OUT STD_LOGIC;
    hw_output_V_value_V_ap_ack : IN STD_LOGIC;
    hw_output_V_last_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    hw_output_V_last_V_ap_vld : OUT STD_LOGIC;
    hw_output_V_last_V_ap_ack : IN STD_LOGIC );
end;


architecture behav of Loop_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_hw_input_stencil_stream_V_value_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal exitcond_flatten_reg_459 : STD_LOGIC_VECTOR (0 downto 0);
    signal hw_output_V_value_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_459 : STD_LOGIC_VECTOR (0 downto 0);
    signal hw_output_V_last_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_118 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_hw_output_y_scan_1_reg_129 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_hw_output_x_scan_2_reg_140 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_flatten_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_sig_ioackin_hw_output_V_value_V_ap_ack : STD_LOGIC;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_459 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_459 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_157_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond8_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_reg_468 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_hw_output_x_scan_s_fu_169_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_hw_output_x_scan_s_reg_473 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_mid1_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid1_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_reg_483 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_hw_output_y_scan_s_fu_195_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_hw_output_x_scan_1_fu_203_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_357_reg_498 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter2_p_357_reg_498 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter3_p_357_reg_498 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_319_fu_282_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_319_reg_503 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_310_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_reg_508 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_reg_513 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp0_iter2_tmp_4_reg_513 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_reg_518 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp4_fu_358_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_reg_523 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_last_V_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_last_V_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_last_V_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_331_fu_381_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_331_reg_533 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_fu_401_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_reg_538 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_355_fu_430_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_355_reg_543 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal ap_reg_ioackin_hw_output_V_value_V_ap_ack : STD_LOGIC := '0';
    signal ap_reg_ioackin_hw_output_V_last_V_ap_ack : STD_LOGIC := '0';
    signal p_hw_output_y_scan_2_fu_189_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_309_fu_214_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_321_fu_222_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_345_fu_236_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_260_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_317_fu_270_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_312_cast_fu_218_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_318_cast_fu_278_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_fu_288_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_329_fu_298_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_330_cast_cast_fu_306_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_324_cast_cast_fu_232_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_336_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_353_fu_346_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_354_cast_cast_fu_354_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_348_cast_cast_fu_246_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_fu_209_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_319_cast_fu_375_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_cast_fu_378_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_341_fu_387_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_342_cast_cast_fu_394_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp4_cast_fu_398_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_335_fu_410_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_336_cast_fu_417_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_331_cast_fu_407_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_421_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp3_cast_fu_427_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_360_cast_fu_436_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_355_cast_fu_439_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_361_fu_442_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_hw_output_V_last_V_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_459))) then
                    if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_hw_output_V_last_V_ap_ack <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_1 = hw_output_V_last_V_ap_ack))) then 
                        ap_reg_ioackin_hw_output_V_last_V_ap_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_hw_output_V_value_V_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_459))) then
                    if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_1 = hw_output_V_value_V_ap_ack))) then 
                        ap_reg_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_151_p2))) then 
                indvar_flatten_reg_118 <= indvar_flatten_next_fu_157_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                indvar_flatten_reg_118 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_hw_output_x_scan_2_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_151_p2))) then 
                p_hw_output_x_scan_2_reg_140 <= p_hw_output_x_scan_1_fu_203_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                p_hw_output_x_scan_2_reg_140 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_hw_output_y_scan_1_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_151_p2))) then 
                p_hw_output_y_scan_1_reg_129 <= p_hw_output_y_scan_s_fu_195_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                p_hw_output_y_scan_1_reg_129 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_459 <= exitcond_flatten_reg_459;
                exitcond_flatten_reg_459 <= exitcond_flatten_fu_151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter2_exitcond_flatten_reg_459 <= ap_reg_pp0_iter1_exitcond_flatten_reg_459;
                ap_reg_pp0_iter2_p_357_reg_498 <= p_357_reg_498;
                ap_reg_pp0_iter2_tmp_4_reg_513 <= tmp_4_reg_513;
                ap_reg_pp0_iter2_tmp_last_V_reg_528 <= tmp_last_V_reg_528;
                ap_reg_pp0_iter3_exitcond_flatten_reg_459 <= ap_reg_pp0_iter2_exitcond_flatten_reg_459;
                ap_reg_pp0_iter3_p_357_reg_498 <= ap_reg_pp0_iter2_p_357_reg_498;
                ap_reg_pp0_iter3_tmp_last_V_reg_528 <= ap_reg_pp0_iter2_tmp_last_V_reg_528;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_151_p2))) then
                exitcond8_reg_468 <= exitcond8_fu_163_p2;
                p_hw_output_x_scan_s_reg_473 <= p_hw_output_x_scan_s_fu_169_p3;
                tmp5_reg_483 <= tmp5_fu_183_p2;
                tmp_mid1_reg_478 <= tmp_mid1_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_459 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                p_319_reg_503 <= p_319_fu_282_p2;
                p_357_reg_498 <= p_hw_input_stencil_stream_V_value_V_dout(71 downto 64);
                tmp1_reg_508 <= tmp1_fu_310_p2;
                tmp4_reg_523 <= tmp4_fu_358_p2;
                tmp_4_reg_513 <= p_hw_input_stencil_stream_V_value_V_dout(37 downto 32);
                tmp_5_reg_518 <= p_hw_input_stencil_stream_V_value_V_dout(46 downto 40);
                tmp_last_V_reg_528 <= tmp_last_V_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_459))) then
                p_331_reg_533 <= p_331_fu_381_p2;
                tmp3_reg_538 <= tmp3_fu_401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_459))) then
                p_355_reg_543 <= p_355_fu_430_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, exitcond_flatten_fu_151_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_151_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_151_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_459)
    begin
                ap_block_pp0_stage0_flag00001001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_459 = ap_const_lv1_0) and (ap_const_logic_0 = p_hw_input_stencil_stream_V_value_V_empty_n));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_459, ap_enable_reg_pp0_iter4, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_459 = ap_const_lv1_0) and (ap_const_logic_0 = p_hw_input_stencil_stream_V_value_V_empty_n)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_boolean_1 = ap_block_state6_io)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_459, ap_enable_reg_pp0_iter4, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_459 = ap_const_lv1_0) and (ap_const_logic_0 = p_hw_input_stencil_stream_V_value_V_empty_n)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_boolean_1 = ap_block_state6_io)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, exitcond_flatten_reg_459)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond_flatten_reg_459 = ap_const_lv1_0) and (ap_const_logic_0 = p_hw_input_stencil_stream_V_value_V_empty_n));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(ap_reg_pp0_iter3_exitcond_flatten_reg_459, ap_sig_ioackin_hw_output_V_value_V_ap_ack)
    begin
                ap_block_state6_io <= ((ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_459) and (ap_const_logic_0 = ap_sig_ioackin_hw_output_V_value_V_ap_ack));
    end process;

        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_151_p2)
    begin
        if ((exitcond_flatten_fu_151_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_hw_output_V_value_V_ap_ack_assign_proc : process(hw_output_V_value_V_ap_ack, ap_reg_ioackin_hw_output_V_value_V_ap_ack)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_hw_output_V_value_V_ap_ack)) then 
            ap_sig_ioackin_hw_output_V_value_V_ap_ack <= hw_output_V_value_V_ap_ack;
        else 
            ap_sig_ioackin_hw_output_V_value_V_ap_ack <= ap_const_logic_1;
        end if; 
    end process;

    exitcond8_fu_163_p2 <= "1" when (p_hw_output_x_scan_2_reg_140 = ap_const_lv2_2) else "0";
    exitcond_flatten_fu_151_p2 <= "1" when (indvar_flatten_reg_118 = ap_const_lv3_4) else "0";
    hw_output_V_last_V <= ap_reg_pp0_iter3_tmp_last_V_reg_528;

    hw_output_V_last_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_reg_pp0_iter3_exitcond_flatten_reg_459, ap_block_pp0_stage0_flag00001001, ap_reg_ioackin_hw_output_V_last_V_ap_ack)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_459) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_hw_output_V_last_V_ap_ack))) then 
            hw_output_V_last_V_ap_vld <= ap_const_logic_1;
        else 
            hw_output_V_last_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    hw_output_V_last_V_blk_n_assign_proc : process(hw_output_V_last_V_ap_ack, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter4, ap_reg_pp0_iter3_exitcond_flatten_reg_459)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_459))) then 
            hw_output_V_last_V_blk_n <= hw_output_V_last_V_ap_ack;
        else 
            hw_output_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hw_output_V_value_V <= p_361_fu_442_p2(11 downto 4);

    hw_output_V_value_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_reg_pp0_iter3_exitcond_flatten_reg_459, ap_block_pp0_stage0_flag00001001, ap_reg_ioackin_hw_output_V_value_V_ap_ack)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_459) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_hw_output_V_value_V_ap_ack))) then 
            hw_output_V_value_V_ap_vld <= ap_const_logic_1;
        else 
            hw_output_V_value_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    hw_output_V_value_V_blk_n_assign_proc : process(hw_output_V_value_V_ap_ack, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter4, ap_reg_pp0_iter3_exitcond_flatten_reg_459)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_459))) then 
            hw_output_V_value_V_blk_n <= hw_output_V_value_V_ap_ack;
        else 
            hw_output_V_value_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    indvar_flatten_next_fu_157_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_118) + unsigned(ap_const_lv3_1));
    p_309_fu_214_p1 <= p_hw_input_stencil_stream_V_value_V_dout(8 - 1 downto 0);
    p_312_cast_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_309_fu_214_p1),9));
    p_317_fu_270_p3 <= (tmp_2_fu_260_p4 & ap_const_lv1_0);
    p_318_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_317_fu_270_p3),9));
    p_319_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_319_reg_503),10));
    p_319_fu_282_p2 <= std_logic_vector(unsigned(p_312_cast_fu_218_p1) + unsigned(p_318_cast_fu_278_p1));
    p_321_fu_222_p4 <= p_hw_input_stencil_stream_V_value_V_dout(23 downto 16);
    p_324_cast_cast_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_321_fu_222_p4),9));
    p_329_fu_298_p3 <= (tmp_3_fu_288_p4 & ap_const_lv1_0);
    p_330_cast_cast_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_329_fu_298_p3),9));
    p_331_cast_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_331_reg_533),11));
    p_331_fu_381_p2 <= std_logic_vector(unsigned(p_319_cast_fu_375_p1) + unsigned(tmp1_cast_fu_378_p1));
    p_335_fu_410_p3 <= (ap_reg_pp0_iter2_tmp_4_reg_513 & ap_const_lv2_0);
    p_336_cast_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_335_fu_410_p3),11));
    p_341_fu_387_p3 <= (tmp_5_reg_518 & ap_const_lv1_0);
    p_342_cast_cast_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_341_fu_387_p3),10));
    p_345_fu_236_p4 <= p_hw_input_stencil_stream_V_value_V_dout(55 downto 48);
    p_348_cast_cast_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_345_fu_236_p4),9));
    p_353_fu_346_p3 <= (tmp_6_fu_336_p4 & ap_const_lv1_0);
    p_354_cast_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_353_fu_346_p3),9));
    p_355_cast_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_355_reg_543),12));
    p_355_fu_430_p2 <= std_logic_vector(unsigned(tmp2_fu_421_p2) + unsigned(tmp3_cast_fu_427_p1));
    p_360_cast_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter3_p_357_reg_498),12));
    p_361_fu_442_p2 <= std_logic_vector(unsigned(p_360_cast_fu_436_p1) + unsigned(p_355_cast_fu_439_p1));

    p_hw_input_stencil_stream_V_value_V_blk_n_assign_proc : process(p_hw_input_stencil_stream_V_value_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond_flatten_reg_459)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_flatten_reg_459 = ap_const_lv1_0))) then 
            p_hw_input_stencil_stream_V_value_V_blk_n <= p_hw_input_stencil_stream_V_value_V_empty_n;
        else 
            p_hw_input_stencil_stream_V_value_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_hw_input_stencil_stream_V_value_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_459, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_459 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            p_hw_input_stencil_stream_V_value_V_read <= ap_const_logic_1;
        else 
            p_hw_input_stencil_stream_V_value_V_read <= ap_const_logic_0;
        end if; 
    end process;

    p_hw_output_x_scan_1_fu_203_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(p_hw_output_x_scan_s_fu_169_p3));
    p_hw_output_x_scan_s_fu_169_p3 <= 
        ap_const_lv2_0 when (exitcond8_fu_163_p2(0) = '1') else 
        p_hw_output_x_scan_2_reg_140;
    p_hw_output_y_scan_2_fu_189_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(p_hw_output_y_scan_1_reg_129));
    p_hw_output_y_scan_s_fu_195_p3 <= 
        p_hw_output_y_scan_2_fu_189_p2 when (exitcond8_fu_163_p2(0) = '1') else 
        p_hw_output_y_scan_1_reg_129;
    tmp1_cast_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_reg_508),10));
    tmp1_fu_310_p2 <= std_logic_vector(unsigned(p_330_cast_cast_fu_306_p1) + unsigned(p_324_cast_cast_fu_232_p1));
    tmp2_fu_421_p2 <= std_logic_vector(unsigned(p_336_cast_fu_417_p1) + unsigned(p_331_cast_fu_407_p1));
    tmp3_cast_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_reg_538),11));
    tmp3_fu_401_p2 <= std_logic_vector(unsigned(p_342_cast_cast_fu_394_p1) + unsigned(tmp4_cast_fu_398_p1));
    tmp4_cast_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_reg_523),10));
    tmp4_fu_358_p2 <= std_logic_vector(unsigned(p_354_cast_cast_fu_354_p1) + unsigned(p_348_cast_cast_fu_246_p1));
    tmp5_fu_183_p2 <= "1" when (p_hw_output_y_scan_1_reg_129 = ap_const_lv2_1) else "0";
    tmp_2_fu_260_p4 <= p_hw_input_stencil_stream_V_value_V_dout(14 downto 8);
    tmp_3_fu_288_p4 <= p_hw_input_stencil_stream_V_value_V_dout(30 downto 24);
    tmp_6_fu_336_p4 <= p_hw_input_stencil_stream_V_value_V_dout(62 downto 56);
    tmp_last_V_fu_369_p2 <= (tmp_s_fu_364_p2 and tmp_mid2_fu_209_p3);
    tmp_mid1_fu_177_p2 <= "1" when (p_hw_output_y_scan_1_reg_129 = ap_const_lv2_0) else "0";
    tmp_mid2_fu_209_p3 <= 
        tmp_mid1_reg_478 when (exitcond8_reg_468(0) = '1') else 
        tmp5_reg_483;
    tmp_s_fu_364_p2 <= "1" when (p_hw_output_x_scan_s_reg_473 = ap_const_lv2_1) else "0";
end behav;
