// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_hw_input_stencil_stream_V_value_V_dout,
        p_hw_input_stencil_stream_V_value_V_empty_n,
        p_hw_input_stencil_stream_V_value_V_read,
        hw_output_V_value_V,
        hw_output_V_value_V_ap_vld,
        hw_output_V_value_V_ap_ack,
        hw_output_V_last_V,
        hw_output_V_last_V_ap_vld,
        hw_output_V_last_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [71:0] p_hw_input_stencil_stream_V_value_V_dout;
input   p_hw_input_stencil_stream_V_value_V_empty_n;
output   p_hw_input_stencil_stream_V_value_V_read;
output  [7:0] hw_output_V_value_V;
output   hw_output_V_value_V_ap_vld;
input   hw_output_V_value_V_ap_ack;
output  [0:0] hw_output_V_last_V;
output   hw_output_V_last_V_ap_vld;
input   hw_output_V_last_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_hw_input_stencil_stream_V_value_V_read;
reg hw_output_V_value_V_ap_vld;
reg hw_output_V_last_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_hw_input_stencil_stream_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_459;
reg    hw_output_V_value_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_459;
reg    hw_output_V_last_V_blk_n;
reg   [2:0] indvar_flatten_reg_118;
reg   [1:0] p_hw_output_y_scan_1_reg_129;
reg   [1:0] p_hw_output_x_scan_2_reg_140;
wire   [0:0] exitcond_flatten_fu_151_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_sig_ioackin_hw_output_V_value_V_ap_ack;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_459;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_459;
wire   [2:0] indvar_flatten_next_fu_157_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond8_fu_163_p2;
reg   [0:0] exitcond8_reg_468;
wire   [1:0] p_hw_output_x_scan_s_fu_169_p3;
reg   [1:0] p_hw_output_x_scan_s_reg_473;
wire   [0:0] tmp_mid1_fu_177_p2;
reg   [0:0] tmp_mid1_reg_478;
wire   [0:0] tmp5_fu_183_p2;
reg   [0:0] tmp5_reg_483;
wire   [1:0] p_hw_output_y_scan_s_fu_195_p3;
wire   [1:0] p_hw_output_x_scan_1_fu_203_p2;
reg   [7:0] p_357_reg_498;
reg   [7:0] ap_reg_pp0_iter2_p_357_reg_498;
reg   [7:0] ap_reg_pp0_iter3_p_357_reg_498;
wire   [8:0] p_319_fu_282_p2;
reg   [8:0] p_319_reg_503;
wire   [8:0] tmp1_fu_310_p2;
reg   [8:0] tmp1_reg_508;
reg   [5:0] tmp_4_reg_513;
reg   [5:0] ap_reg_pp0_iter2_tmp_4_reg_513;
reg   [6:0] tmp_5_reg_518;
wire   [8:0] tmp4_fu_358_p2;
reg   [8:0] tmp4_reg_523;
wire   [0:0] tmp_last_V_fu_369_p2;
reg   [0:0] tmp_last_V_reg_528;
reg   [0:0] ap_reg_pp0_iter2_tmp_last_V_reg_528;
reg   [0:0] ap_reg_pp0_iter3_tmp_last_V_reg_528;
wire   [9:0] p_331_fu_381_p2;
reg   [9:0] p_331_reg_533;
wire   [9:0] tmp3_fu_401_p2;
reg   [9:0] tmp3_reg_538;
wire   [10:0] p_355_fu_430_p2;
reg   [10:0] p_355_reg_543;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_pp0_stage0_flag00001001;
reg    ap_reg_ioackin_hw_output_V_value_V_ap_ack;
reg    ap_reg_ioackin_hw_output_V_last_V_ap_ack;
wire   [1:0] p_hw_output_y_scan_2_fu_189_p2;
wire   [7:0] p_309_fu_214_p1;
wire   [7:0] p_321_fu_222_p4;
wire   [7:0] p_345_fu_236_p4;
wire   [6:0] tmp_2_fu_260_p4;
wire   [7:0] p_317_fu_270_p3;
wire   [8:0] p_312_cast_fu_218_p1;
wire   [8:0] p_318_cast_fu_278_p1;
wire   [6:0] tmp_3_fu_288_p4;
wire   [7:0] p_329_fu_298_p3;
wire   [8:0] p_330_cast_cast_fu_306_p1;
wire   [8:0] p_324_cast_cast_fu_232_p1;
wire   [6:0] tmp_6_fu_336_p4;
wire   [7:0] p_353_fu_346_p3;
wire   [8:0] p_354_cast_cast_fu_354_p1;
wire   [8:0] p_348_cast_cast_fu_246_p1;
wire   [0:0] tmp_s_fu_364_p2;
wire   [0:0] tmp_mid2_fu_209_p3;
wire   [9:0] p_319_cast_fu_375_p1;
wire   [9:0] tmp1_cast_fu_378_p1;
wire   [7:0] p_341_fu_387_p3;
wire   [9:0] p_342_cast_cast_fu_394_p1;
wire   [9:0] tmp4_cast_fu_398_p1;
wire   [7:0] p_335_fu_410_p3;
wire   [10:0] p_336_cast_fu_417_p1;
wire   [10:0] p_331_cast_fu_407_p1;
wire   [10:0] tmp2_fu_421_p2;
wire   [10:0] tmp3_cast_fu_427_p1;
wire   [11:0] p_360_cast_fu_436_p1;
wire   [11:0] p_355_cast_fu_439_p1;
wire   [11:0] p_361_fu_442_p2;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_reg_ioackin_hw_output_V_value_V_ap_ack = 1'b0;
#0 ap_reg_ioackin_hw_output_V_last_V_ap_ack = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_459))) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == hw_output_V_last_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_459))) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == hw_output_V_value_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_151_p2))) begin
        indvar_flatten_reg_118 <= indvar_flatten_next_fu_157_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_118 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_151_p2))) begin
        p_hw_output_x_scan_2_reg_140 <= p_hw_output_x_scan_1_fu_203_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        p_hw_output_x_scan_2_reg_140 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_151_p2))) begin
        p_hw_output_y_scan_1_reg_129 <= p_hw_output_y_scan_s_fu_195_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        p_hw_output_y_scan_1_reg_129 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_459 <= exitcond_flatten_reg_459;
        exitcond_flatten_reg_459 <= exitcond_flatten_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_exitcond_flatten_reg_459 <= ap_reg_pp0_iter1_exitcond_flatten_reg_459;
        ap_reg_pp0_iter2_p_357_reg_498 <= p_357_reg_498;
        ap_reg_pp0_iter2_tmp_4_reg_513 <= tmp_4_reg_513;
        ap_reg_pp0_iter2_tmp_last_V_reg_528 <= tmp_last_V_reg_528;
        ap_reg_pp0_iter3_exitcond_flatten_reg_459 <= ap_reg_pp0_iter2_exitcond_flatten_reg_459;
        ap_reg_pp0_iter3_p_357_reg_498 <= ap_reg_pp0_iter2_p_357_reg_498;
        ap_reg_pp0_iter3_tmp_last_V_reg_528 <= ap_reg_pp0_iter2_tmp_last_V_reg_528;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_151_p2))) begin
        exitcond8_reg_468 <= exitcond8_fu_163_p2;
        p_hw_output_x_scan_s_reg_473 <= p_hw_output_x_scan_s_fu_169_p3;
        tmp5_reg_483 <= tmp5_fu_183_p2;
        tmp_mid1_reg_478 <= tmp_mid1_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_459 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_319_reg_503 <= p_319_fu_282_p2;
        p_357_reg_498 <= {{p_hw_input_stencil_stream_V_value_V_dout[71:64]}};
        tmp1_reg_508 <= tmp1_fu_310_p2;
        tmp4_reg_523 <= tmp4_fu_358_p2;
        tmp_4_reg_513 <= {{p_hw_input_stencil_stream_V_value_V_dout[37:32]}};
        tmp_5_reg_518 <= {{p_hw_input_stencil_stream_V_value_V_dout[46:40]}};
        tmp_last_V_reg_528 <= tmp_last_V_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_459))) begin
        p_331_reg_533 <= p_331_fu_381_p2;
        tmp3_reg_538 <= tmp3_fu_401_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_459))) begin
        p_355_reg_543 <= p_355_fu_430_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_151_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_hw_output_V_value_V_ap_ack)) begin
        ap_sig_ioackin_hw_output_V_value_V_ap_ack = hw_output_V_value_V_ap_ack;
    end else begin
        ap_sig_ioackin_hw_output_V_value_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_459) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_hw_output_V_last_V_ap_ack))) begin
        hw_output_V_last_V_ap_vld = 1'b1;
    end else begin
        hw_output_V_last_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_459))) begin
        hw_output_V_last_V_blk_n = hw_output_V_last_V_ap_ack;
    end else begin
        hw_output_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_459) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_hw_output_V_value_V_ap_ack))) begin
        hw_output_V_value_V_ap_vld = 1'b1;
    end else begin
        hw_output_V_value_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_459))) begin
        hw_output_V_value_V_blk_n = hw_output_V_value_V_ap_ack;
    end else begin
        hw_output_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_459 == 1'd0))) begin
        p_hw_input_stencil_stream_V_value_V_blk_n = p_hw_input_stencil_stream_V_value_V_empty_n;
    end else begin
        p_hw_input_stencil_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_459 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_hw_input_stencil_stream_V_value_V_read = 1'b1;
    end else begin
        p_hw_input_stencil_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_151_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_151_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_459 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_459 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter4) & (1'b1 == ap_block_state6_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_459 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter4) & (1'b1 == ap_block_state6_io)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten_reg_459 == 1'd0) & (1'b0 == p_hw_input_stencil_stream_V_value_V_empty_n));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_459) & (1'b0 == ap_sig_ioackin_hw_output_V_value_V_ap_ack));
end

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond8_fu_163_p2 = ((p_hw_output_x_scan_2_reg_140 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_151_p2 = ((indvar_flatten_reg_118 == 3'd4) ? 1'b1 : 1'b0);

assign hw_output_V_last_V = ap_reg_pp0_iter3_tmp_last_V_reg_528;

assign hw_output_V_value_V = {{p_361_fu_442_p2[11:4]}};

assign indvar_flatten_next_fu_157_p2 = (indvar_flatten_reg_118 + 3'd1);

assign p_309_fu_214_p1 = p_hw_input_stencil_stream_V_value_V_dout[7:0];

assign p_312_cast_fu_218_p1 = p_309_fu_214_p1;

assign p_317_fu_270_p3 = {{tmp_2_fu_260_p4}, {1'd0}};

assign p_318_cast_fu_278_p1 = p_317_fu_270_p3;

assign p_319_cast_fu_375_p1 = p_319_reg_503;

assign p_319_fu_282_p2 = (p_312_cast_fu_218_p1 + p_318_cast_fu_278_p1);

assign p_321_fu_222_p4 = {{p_hw_input_stencil_stream_V_value_V_dout[23:16]}};

assign p_324_cast_cast_fu_232_p1 = p_321_fu_222_p4;

assign p_329_fu_298_p3 = {{tmp_3_fu_288_p4}, {1'd0}};

assign p_330_cast_cast_fu_306_p1 = p_329_fu_298_p3;

assign p_331_cast_fu_407_p1 = p_331_reg_533;

assign p_331_fu_381_p2 = (p_319_cast_fu_375_p1 + tmp1_cast_fu_378_p1);

assign p_335_fu_410_p3 = {{ap_reg_pp0_iter2_tmp_4_reg_513}, {2'd0}};

assign p_336_cast_fu_417_p1 = p_335_fu_410_p3;

assign p_341_fu_387_p3 = {{tmp_5_reg_518}, {1'd0}};

assign p_342_cast_cast_fu_394_p1 = p_341_fu_387_p3;

assign p_345_fu_236_p4 = {{p_hw_input_stencil_stream_V_value_V_dout[55:48]}};

assign p_348_cast_cast_fu_246_p1 = p_345_fu_236_p4;

assign p_353_fu_346_p3 = {{tmp_6_fu_336_p4}, {1'd0}};

assign p_354_cast_cast_fu_354_p1 = p_353_fu_346_p3;

assign p_355_cast_fu_439_p1 = p_355_reg_543;

assign p_355_fu_430_p2 = (tmp2_fu_421_p2 + tmp3_cast_fu_427_p1);

assign p_360_cast_fu_436_p1 = ap_reg_pp0_iter3_p_357_reg_498;

assign p_361_fu_442_p2 = (p_360_cast_fu_436_p1 + p_355_cast_fu_439_p1);

assign p_hw_output_x_scan_1_fu_203_p2 = (2'd1 + p_hw_output_x_scan_s_fu_169_p3);

assign p_hw_output_x_scan_s_fu_169_p3 = ((exitcond8_fu_163_p2[0:0] === 1'b1) ? 2'd0 : p_hw_output_x_scan_2_reg_140);

assign p_hw_output_y_scan_2_fu_189_p2 = (2'd1 + p_hw_output_y_scan_1_reg_129);

assign p_hw_output_y_scan_s_fu_195_p3 = ((exitcond8_fu_163_p2[0:0] === 1'b1) ? p_hw_output_y_scan_2_fu_189_p2 : p_hw_output_y_scan_1_reg_129);

assign tmp1_cast_fu_378_p1 = tmp1_reg_508;

assign tmp1_fu_310_p2 = (p_330_cast_cast_fu_306_p1 + p_324_cast_cast_fu_232_p1);

assign tmp2_fu_421_p2 = (p_336_cast_fu_417_p1 + p_331_cast_fu_407_p1);

assign tmp3_cast_fu_427_p1 = tmp3_reg_538;

assign tmp3_fu_401_p2 = (p_342_cast_cast_fu_394_p1 + tmp4_cast_fu_398_p1);

assign tmp4_cast_fu_398_p1 = tmp4_reg_523;

assign tmp4_fu_358_p2 = (p_354_cast_cast_fu_354_p1 + p_348_cast_cast_fu_246_p1);

assign tmp5_fu_183_p2 = ((p_hw_output_y_scan_1_reg_129 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_2_fu_260_p4 = {{p_hw_input_stencil_stream_V_value_V_dout[14:8]}};

assign tmp_3_fu_288_p4 = {{p_hw_input_stencil_stream_V_value_V_dout[30:24]}};

assign tmp_6_fu_336_p4 = {{p_hw_input_stencil_stream_V_value_V_dout[62:56]}};

assign tmp_last_V_fu_369_p2 = (tmp_s_fu_364_p2 & tmp_mid2_fu_209_p3);

assign tmp_mid1_fu_177_p2 = ((p_hw_output_y_scan_1_reg_129 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_mid2_fu_209_p3 = ((exitcond8_reg_468[0:0] === 1'b1) ? tmp_mid1_reg_478 : tmp5_reg_483);

assign tmp_s_fu_364_p2 = ((p_hw_output_x_scan_s_reg_473 == 2'd1) ? 1'b1 : 1'b0);

endmodule //Loop_1_proc
