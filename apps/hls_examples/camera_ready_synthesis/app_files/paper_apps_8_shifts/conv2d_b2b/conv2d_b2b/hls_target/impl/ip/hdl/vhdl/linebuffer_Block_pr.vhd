-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity linebuffer_Block_pr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_V_value_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_V_value_V_empty_n : IN STD_LOGIC;
    in_stream_V_value_V_read : OUT STD_LOGIC;
    out_stream_V_value_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    out_stream_V_value_V_full_n : IN STD_LOGIC;
    out_stream_V_value_V_write : OUT STD_LOGIC );
end;


architecture behav of linebuffer_Block_pr is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_stream_V_value_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal exitcond_flatten_reg_323 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_value_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal or_cond_i_i_i_i_reg_377 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_85 : STD_LOGIC_VECTOR (2 downto 0);
    signal idx_1_0_i_i_i_i_reg_96 : STD_LOGIC_VECTOR (1 downto 0);
    signal idx_0_0_i_i_i_i_reg_108 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_flatten_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_323 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_125_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_1_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_0_0_i_i_i_i_mid2_fu_137_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal idx_0_0_i_i_i_i_mid2_reg_338 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_145_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_343 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_5_reg_343 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_0_fu_149_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal idx_1_0_i_i_i_i_t_mi_fu_180_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal idx_1_0_i_i_i_i_t_mi_reg_356 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_187_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_value_V_1_reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_i_i_i_i_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal idx_1_0_i_i_i_i_phi_fu_100_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal buffer_1_1_value_V_4_fu_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_1_1_value_V_8_fu_259_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_1_1_value_V_9_fu_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_1_1_value_V_7_fu_252_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_1_1_value_V_10_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_1_1_value_V_6_fu_245_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_1_1_value_V_11_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_1_1_value_V_5_fu_238_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_mid1_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_s_fu_174_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_mid2_fu_167_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_1_1_value_V_1_fu_214_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_1_1_value_V_2_fu_220_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_1_1_value_V_fu_226_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_1_1_value_V_3_fu_232_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    idx_0_0_i_i_i_i_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_119_p2))) then 
                idx_0_0_i_i_i_i_reg_108 <= idx_0_fu_149_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                idx_0_0_i_i_i_i_reg_108 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    idx_1_0_i_i_i_i_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_323))) then 
                idx_1_0_i_i_i_i_reg_96 <= idx_1_0_i_i_i_i_t_mi_reg_356;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                idx_1_0_i_i_i_i_reg_96 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_119_p2))) then 
                indvar_flatten_reg_85 <= indvar_flatten_next_fu_125_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                indvar_flatten_reg_85 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_323 <= exitcond_flatten_reg_323;
                ap_reg_pp0_iter1_tmp_5_reg_343 <= tmp_5_reg_343;
                exitcond_flatten_reg_323 <= exitcond_flatten_fu_119_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_323))) then
                buffer_1_1_value_V_10_fu_64 <= buffer_1_1_value_V_6_fu_245_p3;
                buffer_1_1_value_V_11_fu_68 <= buffer_1_1_value_V_5_fu_238_p3;
                buffer_1_1_value_V_4_fu_56 <= buffer_1_1_value_V_8_fu_259_p3;
                buffer_1_1_value_V_9_fu_60 <= buffer_1_1_value_V_7_fu_252_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_119_p2))) then
                idx_0_0_i_i_i_i_mid2_reg_338 <= idx_0_0_i_i_i_i_mid2_fu_137_p3;
                tmp_1_reg_332 <= tmp_1_fu_131_p2;
                tmp_5_reg_343 <= tmp_5_fu_145_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_323 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                idx_1_0_i_i_i_i_t_mi_reg_356 <= idx_1_0_i_i_i_i_t_mi_fu_180_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_323 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                or_cond_i_i_i_i_reg_377 <= or_cond_i_i_i_i_fu_196_p2;
                tmp_reg_361 <= tmp_fu_187_p1;
                tmp_value_V_1_reg_369 <= in_stream_V_value_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, exitcond_flatten_fu_119_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_flag00011011)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_flatten_fu_119_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_flatten_fu_119_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(in_stream_V_value_V_empty_n, out_stream_V_value_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_323, ap_enable_reg_pp0_iter2, or_cond_i_i_i_i_reg_377)
    begin
                ap_block_pp0_stage0_flag00001001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_323 = ap_const_lv1_0) and (ap_const_logic_0 = in_stream_V_value_V_empty_n)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (or_cond_i_i_i_i_reg_377 = ap_const_lv1_1) and (ap_const_logic_0 = out_stream_V_value_V_full_n)));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(in_stream_V_value_V_empty_n, out_stream_V_value_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_323, ap_enable_reg_pp0_iter2, or_cond_i_i_i_i_reg_377)
    begin
                ap_block_pp0_stage0_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_323 = ap_const_lv1_0) and (ap_const_logic_0 = in_stream_V_value_V_empty_n)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (or_cond_i_i_i_i_reg_377 = ap_const_lv1_1) and (ap_const_logic_0 = out_stream_V_value_V_full_n)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(in_stream_V_value_V_empty_n, out_stream_V_value_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_323, ap_enable_reg_pp0_iter2, or_cond_i_i_i_i_reg_377)
    begin
                ap_block_pp0_stage0_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_323 = ap_const_lv1_0) and (ap_const_logic_0 = in_stream_V_value_V_empty_n)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (or_cond_i_i_i_i_reg_377 = ap_const_lv1_1) and (ap_const_logic_0 = out_stream_V_value_V_full_n)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_stream_V_value_V_empty_n, exitcond_flatten_reg_323)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond_flatten_reg_323 = ap_const_lv1_0) and (ap_const_logic_0 = in_stream_V_value_V_empty_n));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(out_stream_V_value_V_full_n, or_cond_i_i_i_i_reg_377)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((or_cond_i_i_i_i_reg_377 = ap_const_lv1_1) and (ap_const_logic_0 = out_stream_V_value_V_full_n));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_119_p2)
    begin
        if ((ap_const_lv1_1 = exitcond_flatten_fu_119_p2)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_1_1_value_V_1_fu_214_p3 <= 
        tmp_value_V_1_reg_369 when (ap_reg_pp0_iter1_tmp_5_reg_343(0) = '1') else 
        buffer_1_1_value_V_11_fu_68;
    buffer_1_1_value_V_2_fu_220_p3 <= 
        buffer_1_1_value_V_10_fu_64 when (ap_reg_pp0_iter1_tmp_5_reg_343(0) = '1') else 
        tmp_value_V_1_reg_369;
    buffer_1_1_value_V_3_fu_232_p3 <= 
        buffer_1_1_value_V_4_fu_56 when (ap_reg_pp0_iter1_tmp_5_reg_343(0) = '1') else 
        tmp_value_V_1_reg_369;
    buffer_1_1_value_V_5_fu_238_p3 <= 
        buffer_1_1_value_V_1_fu_214_p3 when (tmp_reg_361(0) = '1') else 
        buffer_1_1_value_V_11_fu_68;
    buffer_1_1_value_V_6_fu_245_p3 <= 
        buffer_1_1_value_V_2_fu_220_p3 when (tmp_reg_361(0) = '1') else 
        buffer_1_1_value_V_10_fu_64;
    buffer_1_1_value_V_7_fu_252_p3 <= 
        buffer_1_1_value_V_9_fu_60 when (tmp_reg_361(0) = '1') else 
        buffer_1_1_value_V_fu_226_p3;
    buffer_1_1_value_V_8_fu_259_p3 <= 
        buffer_1_1_value_V_4_fu_56 when (tmp_reg_361(0) = '1') else 
        buffer_1_1_value_V_3_fu_232_p3;
    buffer_1_1_value_V_fu_226_p3 <= 
        tmp_value_V_1_reg_369 when (ap_reg_pp0_iter1_tmp_5_reg_343(0) = '1') else 
        buffer_1_1_value_V_9_fu_60;
    exitcond_flatten_fu_119_p2 <= "1" when (indvar_flatten_reg_85 = ap_const_lv3_4) else "0";
    idx_0_0_i_i_i_i_mid2_fu_137_p3 <= 
        ap_const_lv2_0 when (tmp_1_fu_131_p2(0) = '1') else 
        idx_0_0_i_i_i_i_reg_108;
    idx_0_fu_149_p2 <= std_logic_vector(unsigned(idx_0_0_i_i_i_i_mid2_fu_137_p3) + unsigned(ap_const_lv2_1));

    idx_1_0_i_i_i_i_phi_fu_100_p4_assign_proc : process(ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter2, idx_1_0_i_i_i_i_reg_96, ap_reg_pp0_iter1_exitcond_flatten_reg_323, idx_1_0_i_i_i_i_t_mi_reg_356)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_323))) then 
            idx_1_0_i_i_i_i_phi_fu_100_p4 <= idx_1_0_i_i_i_i_t_mi_reg_356;
        else 
            idx_1_0_i_i_i_i_phi_fu_100_p4 <= idx_1_0_i_i_i_i_reg_96;
        end if; 
    end process;

    idx_1_0_i_i_i_i_t_mi_fu_180_p3 <= 
        idx_s_fu_174_p2 when (tmp_1_reg_332(0) = '1') else 
        idx_1_0_i_i_i_i_phi_fu_100_p4;
    idx_s_fu_174_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(idx_1_0_i_i_i_i_phi_fu_100_p4));

    in_stream_V_value_V_blk_n_assign_proc : process(in_stream_V_value_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond_flatten_reg_323)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_flatten_reg_323 = ap_const_lv1_0))) then 
            in_stream_V_value_V_blk_n <= in_stream_V_value_V_empty_n;
        else 
            in_stream_V_value_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_V_value_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_323, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_323 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            in_stream_V_value_V_read <= ap_const_logic_1;
        else 
            in_stream_V_value_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_125_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_85) + unsigned(ap_const_lv3_1));
    or_cond_i_i_i_i_fu_196_p2 <= (tmp_7_mid2_fu_167_p3 and tmp_s_fu_191_p2);

    out_stream_V_value_V_blk_n_assign_proc : process(out_stream_V_value_V_full_n, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter2, or_cond_i_i_i_i_reg_377)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (or_cond_i_i_i_i_reg_377 = ap_const_lv1_1))) then 
            out_stream_V_value_V_blk_n <= out_stream_V_value_V_full_n;
        else 
            out_stream_V_value_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_V_value_V_din <= (((buffer_1_1_value_V_5_fu_238_p3 & buffer_1_1_value_V_6_fu_245_p3) & buffer_1_1_value_V_7_fu_252_p3) & buffer_1_1_value_V_8_fu_259_p3);

    out_stream_V_value_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, or_cond_i_i_i_i_reg_377, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (or_cond_i_i_i_i_reg_377 = ap_const_lv1_1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            out_stream_V_value_V_write <= ap_const_logic_1;
        else 
            out_stream_V_value_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_131_p2 <= "1" when (idx_0_0_i_i_i_i_reg_108 = ap_const_lv2_2) else "0";
    tmp_4_fu_161_p2 <= "1" when (idx_1_0_i_i_i_i_phi_fu_100_p4 = ap_const_lv2_1) else "0";
    tmp_5_fu_145_p1 <= idx_0_0_i_i_i_i_mid2_fu_137_p3(1 - 1 downto 0);
    tmp_7_mid1_fu_155_p2 <= "1" when (idx_1_0_i_i_i_i_phi_fu_100_p4 = ap_const_lv2_0) else "0";
    tmp_7_mid2_fu_167_p3 <= 
        tmp_7_mid1_fu_155_p2 when (tmp_1_reg_332(0) = '1') else 
        tmp_4_fu_161_p2;
    tmp_fu_187_p1 <= idx_1_0_i_i_i_i_t_mi_fu_180_p3(1 - 1 downto 0);
    tmp_s_fu_191_p2 <= "1" when (idx_0_0_i_i_i_i_mid2_reg_338 = ap_const_lv2_1) else "0";
end behav;
