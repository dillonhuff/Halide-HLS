// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Block_preheader39_p_HH_
#define _Block_preheader39_p_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fifo_w32_d1_S.h"

namespace ap_rtl {

struct Block_preheader39_p : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<128> > p_mul_stencil_stream_V_value_V_dout;
    sc_in< sc_logic > p_mul_stencil_stream_V_value_V_empty_n;
    sc_out< sc_logic > p_mul_stencil_stream_V_value_V_read;
    sc_out< sc_lv<8> > hw_output_V_value_V;
    sc_out< sc_logic > hw_output_V_value_V_ap_vld;
    sc_in< sc_logic > hw_output_V_value_V_ap_ack;
    sc_out< sc_lv<1> > hw_output_V_last_V;
    sc_out< sc_logic > hw_output_V_last_V_ap_vld;
    sc_in< sc_logic > hw_output_V_last_V_ap_ack;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    Block_preheader39_p(sc_module_name name);
    SC_HAS_PROCESS(Block_preheader39_p);

    ~Block_preheader39_p();

    sc_trace_file* mVcdFile;

    fifo_w32_d1_S* p_p2_mul1_stencil_str_fifo_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > p_mul_stencil_stream_V_value_V_blk_n;
    sc_signal< sc_logic > hw_output_V_value_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > hw_output_V_last_V_blk_n;
    sc_signal< sc_lv<9> > p_9_fu_148_p2;
    sc_signal< sc_lv<9> > p_9_reg_230;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<9> > tmp_fu_190_p2;
    sc_signal< sc_lv<9> > tmp_reg_235;
    sc_signal< sc_lv<32> > p_p2_mul1_stencil_str_din;
    sc_signal< sc_logic > p_p2_mul1_stencil_str_full_n;
    sc_signal< sc_logic > p_p2_mul1_stencil_str_write;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > p_p2_mul1_stencil_str_dout;
    sc_signal< sc_logic > p_p2_mul1_stencil_str_empty_n;
    sc_signal< sc_logic > p_p2_mul1_stencil_str_read;
    sc_signal< sc_logic > ap_sig_ioackin_hw_output_V_value_V_ap_ack;
    sc_signal< sc_logic > ap_reg_ioackin_hw_output_V_value_V_ap_ack;
    sc_signal< sc_logic > ap_reg_ioackin_hw_output_V_last_V_ap_ack;
    sc_signal< sc_lv<8> > p_s_fu_112_p4;
    sc_signal< sc_lv<6> > tmp_6_fu_126_p4;
    sc_signal< sc_lv<8> > p_8_fu_136_p3;
    sc_signal< sc_lv<9> > p_323_cast_fu_144_p1;
    sc_signal< sc_lv<9> > p_315_cast_fu_122_p1;
    sc_signal< sc_lv<7> > tmp_7_fu_154_p4;
    sc_signal< sc_lv<8> > p_10_fu_164_p3;
    sc_signal< sc_lv<8> > p_11_fu_176_p4;
    sc_signal< sc_lv<9> > p_339_cast_cast_fu_186_p1;
    sc_signal< sc_lv<9> > p_331_cast_cast_fu_172_p1;
    sc_signal< sc_lv<10> > p_324_cast_fu_196_p1;
    sc_signal< sc_lv<10> > tmp_cast_fu_199_p1;
    sc_signal< sc_lv<10> > tmp_value_V_6_fu_202_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_24;
    static const sc_lv<32> ap_const_lv32_29;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_44;
    static const sc_lv<32> ap_const_lv32_4A;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_64;
    static const sc_lv<32> ap_const_lv32_6B;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_A;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_ioackin_hw_output_V_value_V_ap_ack();
    void thread_hw_output_V_last_V();
    void thread_hw_output_V_last_V_ap_vld();
    void thread_hw_output_V_last_V_blk_n();
    void thread_hw_output_V_value_V();
    void thread_hw_output_V_value_V_ap_vld();
    void thread_hw_output_V_value_V_blk_n();
    void thread_p_10_fu_164_p3();
    void thread_p_11_fu_176_p4();
    void thread_p_315_cast_fu_122_p1();
    void thread_p_323_cast_fu_144_p1();
    void thread_p_324_cast_fu_196_p1();
    void thread_p_331_cast_cast_fu_172_p1();
    void thread_p_339_cast_cast_fu_186_p1();
    void thread_p_8_fu_136_p3();
    void thread_p_9_fu_148_p2();
    void thread_p_mul_stencil_stream_V_value_V_blk_n();
    void thread_p_mul_stencil_stream_V_value_V_read();
    void thread_p_p2_mul1_stencil_str_din();
    void thread_p_p2_mul1_stencil_str_read();
    void thread_p_p2_mul1_stencil_str_write();
    void thread_p_s_fu_112_p4();
    void thread_tmp_6_fu_126_p4();
    void thread_tmp_7_fu_154_p4();
    void thread_tmp_cast_fu_199_p1();
    void thread_tmp_fu_190_p2();
    void thread_tmp_value_V_6_fu_202_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
