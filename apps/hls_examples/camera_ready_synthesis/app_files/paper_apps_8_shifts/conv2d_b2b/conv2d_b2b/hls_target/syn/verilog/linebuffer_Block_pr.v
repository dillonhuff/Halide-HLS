// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linebuffer_Block_pr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_stream_V_value_V_dout,
        in_stream_V_value_V_empty_n,
        in_stream_V_value_V_read,
        out_stream_V_value_V_din,
        out_stream_V_value_V_full_n,
        out_stream_V_value_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] in_stream_V_value_V_dout;
input   in_stream_V_value_V_empty_n;
output   in_stream_V_value_V_read;
output  [127:0] out_stream_V_value_V_din;
input   out_stream_V_value_V_full_n;
output   out_stream_V_value_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_stream_V_value_V_read;
reg out_stream_V_value_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_stream_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_323;
reg    out_stream_V_value_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] or_cond_i_i_i_i_reg_377;
reg   [2:0] indvar_flatten_reg_85;
reg   [1:0] idx_1_0_i_i_i_i_reg_96;
reg   [1:0] idx_0_0_i_i_i_i_reg_108;
wire   [0:0] exitcond_flatten_fu_119_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_323;
wire   [2:0] indvar_flatten_next_fu_125_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_1_fu_131_p2;
reg   [0:0] tmp_1_reg_332;
wire   [1:0] idx_0_0_i_i_i_i_mid2_fu_137_p3;
reg   [1:0] idx_0_0_i_i_i_i_mid2_reg_338;
wire   [0:0] tmp_5_fu_145_p1;
reg   [0:0] tmp_5_reg_343;
reg   [0:0] ap_reg_pp0_iter1_tmp_5_reg_343;
wire   [1:0] idx_0_fu_149_p2;
wire   [1:0] idx_1_0_i_i_i_i_t_mi_fu_180_p3;
reg   [1:0] idx_1_0_i_i_i_i_t_mi_reg_356;
wire   [0:0] tmp_fu_187_p1;
reg   [0:0] tmp_reg_361;
reg   [31:0] tmp_value_V_1_reg_369;
wire   [0:0] or_cond_i_i_i_i_fu_196_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [1:0] idx_1_0_i_i_i_i_phi_fu_100_p4;
reg    ap_block_pp0_stage0_flag00001001;
reg   [31:0] buffer_1_1_value_V_4_fu_56;
wire   [31:0] buffer_1_1_value_V_8_fu_259_p3;
reg   [31:0] buffer_1_1_value_V_9_fu_60;
wire   [31:0] buffer_1_1_value_V_7_fu_252_p3;
reg   [31:0] buffer_1_1_value_V_10_fu_64;
wire   [31:0] buffer_1_1_value_V_6_fu_245_p3;
reg   [31:0] buffer_1_1_value_V_11_fu_68;
wire   [31:0] buffer_1_1_value_V_5_fu_238_p3;
wire   [0:0] tmp_7_mid1_fu_155_p2;
wire   [0:0] tmp_4_fu_161_p2;
wire   [1:0] idx_s_fu_174_p2;
wire   [0:0] tmp_7_mid2_fu_167_p3;
wire   [0:0] tmp_s_fu_191_p2;
wire   [31:0] buffer_1_1_value_V_1_fu_214_p3;
wire   [31:0] buffer_1_1_value_V_2_fu_220_p3;
wire   [31:0] buffer_1_1_value_V_fu_226_p3;
wire   [31:0] buffer_1_1_value_V_3_fu_232_p3;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_119_p2))) begin
        idx_0_0_i_i_i_i_reg_108 <= idx_0_fu_149_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        idx_0_0_i_i_i_i_reg_108 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_323))) begin
        idx_1_0_i_i_i_i_reg_96 <= idx_1_0_i_i_i_i_t_mi_reg_356;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        idx_1_0_i_i_i_i_reg_96 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_119_p2))) begin
        indvar_flatten_reg_85 <= indvar_flatten_next_fu_125_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_85 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_323 <= exitcond_flatten_reg_323;
        ap_reg_pp0_iter1_tmp_5_reg_343 <= tmp_5_reg_343;
        exitcond_flatten_reg_323 <= exitcond_flatten_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_323))) begin
        buffer_1_1_value_V_10_fu_64 <= buffer_1_1_value_V_6_fu_245_p3;
        buffer_1_1_value_V_11_fu_68 <= buffer_1_1_value_V_5_fu_238_p3;
        buffer_1_1_value_V_4_fu_56 <= buffer_1_1_value_V_8_fu_259_p3;
        buffer_1_1_value_V_9_fu_60 <= buffer_1_1_value_V_7_fu_252_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_119_p2))) begin
        idx_0_0_i_i_i_i_mid2_reg_338 <= idx_0_0_i_i_i_i_mid2_fu_137_p3;
        tmp_1_reg_332 <= tmp_1_fu_131_p2;
        tmp_5_reg_343 <= tmp_5_fu_145_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_323 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        idx_1_0_i_i_i_i_t_mi_reg_356 <= idx_1_0_i_i_i_i_t_mi_fu_180_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_323 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        or_cond_i_i_i_i_reg_377 <= or_cond_i_i_i_i_fu_196_p2;
        tmp_reg_361 <= tmp_fu_187_p1;
        tmp_value_V_1_reg_369 <= in_stream_V_value_V_dout;
    end
end

always @ (*) begin
    if ((1'd1 == exitcond_flatten_fu_119_p2)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_323))) begin
        idx_1_0_i_i_i_i_phi_fu_100_p4 = idx_1_0_i_i_i_i_t_mi_reg_356;
    end else begin
        idx_1_0_i_i_i_i_phi_fu_100_p4 = idx_1_0_i_i_i_i_reg_96;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_323 == 1'd0))) begin
        in_stream_V_value_V_blk_n = in_stream_V_value_V_empty_n;
    end else begin
        in_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_323 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        in_stream_V_value_V_read = 1'b1;
    end else begin
        in_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (or_cond_i_i_i_i_reg_377 == 1'd1))) begin
        out_stream_V_value_V_blk_n = out_stream_V_value_V_full_n;
    end else begin
        out_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (or_cond_i_i_i_i_reg_377 == 1'd1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        out_stream_V_value_V_write = 1'b1;
    end else begin
        out_stream_V_value_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_flatten_fu_119_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_flatten_fu_119_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_323 == 1'd0) & (1'b0 == in_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (or_cond_i_i_i_i_reg_377 == 1'd1) & (1'b0 == out_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_323 == 1'd0) & (1'b0 == in_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (or_cond_i_i_i_i_reg_377 == 1'd1) & (1'b0 == out_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_323 == 1'd0) & (1'b0 == in_stream_V_value_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (or_cond_i_i_i_i_reg_377 == 1'd1) & (1'b0 == out_stream_V_value_V_full_n)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten_reg_323 == 1'd0) & (1'b0 == in_stream_V_value_V_empty_n));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((or_cond_i_i_i_i_reg_377 == 1'd1) & (1'b0 == out_stream_V_value_V_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign buffer_1_1_value_V_1_fu_214_p3 = ((ap_reg_pp0_iter1_tmp_5_reg_343[0:0] === 1'b1) ? tmp_value_V_1_reg_369 : buffer_1_1_value_V_11_fu_68);

assign buffer_1_1_value_V_2_fu_220_p3 = ((ap_reg_pp0_iter1_tmp_5_reg_343[0:0] === 1'b1) ? buffer_1_1_value_V_10_fu_64 : tmp_value_V_1_reg_369);

assign buffer_1_1_value_V_3_fu_232_p3 = ((ap_reg_pp0_iter1_tmp_5_reg_343[0:0] === 1'b1) ? buffer_1_1_value_V_4_fu_56 : tmp_value_V_1_reg_369);

assign buffer_1_1_value_V_5_fu_238_p3 = ((tmp_reg_361[0:0] === 1'b1) ? buffer_1_1_value_V_1_fu_214_p3 : buffer_1_1_value_V_11_fu_68);

assign buffer_1_1_value_V_6_fu_245_p3 = ((tmp_reg_361[0:0] === 1'b1) ? buffer_1_1_value_V_2_fu_220_p3 : buffer_1_1_value_V_10_fu_64);

assign buffer_1_1_value_V_7_fu_252_p3 = ((tmp_reg_361[0:0] === 1'b1) ? buffer_1_1_value_V_9_fu_60 : buffer_1_1_value_V_fu_226_p3);

assign buffer_1_1_value_V_8_fu_259_p3 = ((tmp_reg_361[0:0] === 1'b1) ? buffer_1_1_value_V_4_fu_56 : buffer_1_1_value_V_3_fu_232_p3);

assign buffer_1_1_value_V_fu_226_p3 = ((ap_reg_pp0_iter1_tmp_5_reg_343[0:0] === 1'b1) ? tmp_value_V_1_reg_369 : buffer_1_1_value_V_9_fu_60);

assign exitcond_flatten_fu_119_p2 = ((indvar_flatten_reg_85 == 3'd4) ? 1'b1 : 1'b0);

assign idx_0_0_i_i_i_i_mid2_fu_137_p3 = ((tmp_1_fu_131_p2[0:0] === 1'b1) ? 2'd0 : idx_0_0_i_i_i_i_reg_108);

assign idx_0_fu_149_p2 = (idx_0_0_i_i_i_i_mid2_fu_137_p3 + 2'd1);

assign idx_1_0_i_i_i_i_t_mi_fu_180_p3 = ((tmp_1_reg_332[0:0] === 1'b1) ? idx_s_fu_174_p2 : idx_1_0_i_i_i_i_phi_fu_100_p4);

assign idx_s_fu_174_p2 = (2'd1 + idx_1_0_i_i_i_i_phi_fu_100_p4);

assign indvar_flatten_next_fu_125_p2 = (indvar_flatten_reg_85 + 3'd1);

assign or_cond_i_i_i_i_fu_196_p2 = (tmp_7_mid2_fu_167_p3 & tmp_s_fu_191_p2);

assign out_stream_V_value_V_din = {{{{buffer_1_1_value_V_5_fu_238_p3}, {buffer_1_1_value_V_6_fu_245_p3}}, {buffer_1_1_value_V_7_fu_252_p3}}, {buffer_1_1_value_V_8_fu_259_p3}};

assign tmp_1_fu_131_p2 = ((idx_0_0_i_i_i_i_reg_108 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_4_fu_161_p2 = ((idx_1_0_i_i_i_i_phi_fu_100_p4 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_5_fu_145_p1 = idx_0_0_i_i_i_i_mid2_fu_137_p3[0:0];

assign tmp_7_mid1_fu_155_p2 = ((idx_1_0_i_i_i_i_phi_fu_100_p4 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_7_mid2_fu_167_p3 = ((tmp_1_reg_332[0:0] === 1'b1) ? tmp_7_mid1_fu_155_p2 : tmp_4_fu_161_p2);

assign tmp_fu_187_p1 = idx_1_0_i_i_i_i_t_mi_fu_180_p3[0:0];

assign tmp_s_fu_191_p2 = ((idx_0_0_i_i_i_i_mid2_reg_338 == 2'd1) ? 1'b1 : 1'b0);

endmodule //linebuffer_Block_pr
