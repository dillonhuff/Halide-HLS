// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _linebuffer_Block_pr_HH_
#define _linebuffer_Block_pr_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct linebuffer_Block_pr : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > in_stream_V_value_V_dout;
    sc_in< sc_logic > in_stream_V_value_V_empty_n;
    sc_out< sc_logic > in_stream_V_value_V_read;
    sc_out< sc_lv<128> > out_stream_V_value_V_din;
    sc_in< sc_logic > out_stream_V_value_V_full_n;
    sc_out< sc_logic > out_stream_V_value_V_write;


    // Module declarations
    linebuffer_Block_pr(sc_module_name name);
    SC_HAS_PROCESS(linebuffer_Block_pr);

    ~linebuffer_Block_pr();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > in_stream_V_value_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_323;
    sc_signal< sc_logic > out_stream_V_value_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > or_cond_i_i_i_i_reg_377;
    sc_signal< sc_lv<3> > indvar_flatten_reg_85;
    sc_signal< sc_lv<2> > idx_1_0_i_i_i_i_reg_96;
    sc_signal< sc_lv<2> > idx_0_0_i_i_i_i_reg_108;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_119_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond_flatten_reg_323;
    sc_signal< sc_lv<3> > indvar_flatten_next_fu_125_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > tmp_1_fu_131_p2;
    sc_signal< sc_lv<1> > tmp_1_reg_332;
    sc_signal< sc_lv<2> > idx_0_0_i_i_i_i_mid2_fu_137_p3;
    sc_signal< sc_lv<2> > idx_0_0_i_i_i_i_mid2_reg_338;
    sc_signal< sc_lv<1> > tmp_5_fu_145_p1;
    sc_signal< sc_lv<1> > tmp_5_reg_343;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_tmp_5_reg_343;
    sc_signal< sc_lv<2> > idx_0_fu_149_p2;
    sc_signal< sc_lv<2> > idx_1_0_i_i_i_i_t_mi_fu_180_p3;
    sc_signal< sc_lv<2> > idx_1_0_i_i_i_i_t_mi_reg_356;
    sc_signal< sc_lv<1> > tmp_fu_187_p1;
    sc_signal< sc_lv<1> > tmp_reg_361;
    sc_signal< sc_lv<32> > tmp_value_V_1_reg_369;
    sc_signal< sc_lv<1> > or_cond_i_i_i_i_fu_196_p2;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<2> > idx_1_0_i_i_i_i_phi_fu_100_p4;
    sc_signal< bool > ap_block_pp0_stage0_flag00001001;
    sc_signal< sc_lv<32> > buffer_1_1_value_V_4_fu_56;
    sc_signal< sc_lv<32> > buffer_1_1_value_V_8_fu_259_p3;
    sc_signal< sc_lv<32> > buffer_1_1_value_V_9_fu_60;
    sc_signal< sc_lv<32> > buffer_1_1_value_V_7_fu_252_p3;
    sc_signal< sc_lv<32> > buffer_1_1_value_V_10_fu_64;
    sc_signal< sc_lv<32> > buffer_1_1_value_V_6_fu_245_p3;
    sc_signal< sc_lv<32> > buffer_1_1_value_V_11_fu_68;
    sc_signal< sc_lv<32> > buffer_1_1_value_V_5_fu_238_p3;
    sc_signal< sc_lv<1> > tmp_7_mid1_fu_155_p2;
    sc_signal< sc_lv<1> > tmp_4_fu_161_p2;
    sc_signal< sc_lv<2> > idx_s_fu_174_p2;
    sc_signal< sc_lv<1> > tmp_7_mid2_fu_167_p3;
    sc_signal< sc_lv<1> > tmp_s_fu_191_p2;
    sc_signal< sc_lv<32> > buffer_1_1_value_V_1_fu_214_p3;
    sc_signal< sc_lv<32> > buffer_1_1_value_V_2_fu_220_p3;
    sc_signal< sc_lv<32> > buffer_1_1_value_V_fu_226_p3;
    sc_signal< sc_lv<32> > buffer_1_1_value_V_3_fu_232_p3;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00001001();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_buffer_1_1_value_V_1_fu_214_p3();
    void thread_buffer_1_1_value_V_2_fu_220_p3();
    void thread_buffer_1_1_value_V_3_fu_232_p3();
    void thread_buffer_1_1_value_V_5_fu_238_p3();
    void thread_buffer_1_1_value_V_6_fu_245_p3();
    void thread_buffer_1_1_value_V_7_fu_252_p3();
    void thread_buffer_1_1_value_V_8_fu_259_p3();
    void thread_buffer_1_1_value_V_fu_226_p3();
    void thread_exitcond_flatten_fu_119_p2();
    void thread_idx_0_0_i_i_i_i_mid2_fu_137_p3();
    void thread_idx_0_fu_149_p2();
    void thread_idx_1_0_i_i_i_i_phi_fu_100_p4();
    void thread_idx_1_0_i_i_i_i_t_mi_fu_180_p3();
    void thread_idx_s_fu_174_p2();
    void thread_in_stream_V_value_V_blk_n();
    void thread_in_stream_V_value_V_read();
    void thread_indvar_flatten_next_fu_125_p2();
    void thread_or_cond_i_i_i_i_fu_196_p2();
    void thread_out_stream_V_value_V_blk_n();
    void thread_out_stream_V_value_V_din();
    void thread_out_stream_V_value_V_write();
    void thread_tmp_1_fu_131_p2();
    void thread_tmp_4_fu_161_p2();
    void thread_tmp_5_fu_145_p1();
    void thread_tmp_7_mid1_fu_155_p2();
    void thread_tmp_7_mid2_fu_167_p3();
    void thread_tmp_fu_187_p1();
    void thread_tmp_s_fu_191_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
