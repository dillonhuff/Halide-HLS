// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_1_proc_HH_
#define _Loop_1_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Loop_1_proc : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<72> > p_hw_input_stencil_stream_V_value_V_dout;
    sc_in< sc_logic > p_hw_input_stencil_stream_V_value_V_empty_n;
    sc_out< sc_logic > p_hw_input_stencil_stream_V_value_V_read;
    sc_out< sc_lv<32> > p_mul_stencil_update_stream_V_value_V_din;
    sc_in< sc_logic > p_mul_stencil_update_stream_V_value_V_full_n;
    sc_out< sc_logic > p_mul_stencil_update_stream_V_value_V_write;


    // Module declarations
    Loop_1_proc(sc_module_name name);
    SC_HAS_PROCESS(Loop_1_proc);

    ~Loop_1_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > real_start_status_reg;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > start_control_reg;
    sc_signal< sc_logic > p_hw_input_stencil_stream_V_value_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_354;
    sc_signal< sc_logic > p_mul_stencil_update_stream_V_value_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter3_exitcond_flatten_reg_354;
    sc_signal< sc_lv<3> > indvar_flatten_reg_103;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_114_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond_flatten_reg_354;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter2_exitcond_flatten_reg_354;
    sc_signal< sc_lv<3> > indvar_flatten_next_fu_120_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<8> > p_302_reg_363;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter2_p_302_reg_363;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter3_p_302_reg_363;
    sc_signal< sc_lv<9> > p_252_fu_194_p2;
    sc_signal< sc_lv<9> > p_252_reg_368;
    sc_signal< sc_lv<9> > tmp1_fu_222_p2;
    sc_signal< sc_lv<9> > tmp1_reg_373;
    sc_signal< sc_lv<6> > tmp_3_reg_378;
    sc_signal< sc_lv<6> > ap_reg_pp0_iter2_tmp_3_reg_378;
    sc_signal< sc_lv<7> > tmp_4_reg_383;
    sc_signal< sc_lv<9> > tmp4_fu_270_p2;
    sc_signal< sc_lv<9> > tmp4_reg_388;
    sc_signal< sc_lv<10> > p_268_fu_282_p2;
    sc_signal< sc_lv<10> > p_268_reg_393;
    sc_signal< sc_lv<10> > tmp3_fu_302_p2;
    sc_signal< sc_lv<10> > tmp3_reg_398;
    sc_signal< sc_lv<11> > p_300_fu_331_p2;
    sc_signal< sc_lv<11> > p_300_reg_403;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_flag00001001;
    sc_signal< sc_lv<8> > p_238_fu_126_p1;
    sc_signal< sc_lv<8> > p_254_fu_134_p4;
    sc_signal< sc_lv<8> > p_286_fu_148_p4;
    sc_signal< sc_lv<7> > tmp_1_fu_172_p4;
    sc_signal< sc_lv<8> > p_250_fu_182_p3;
    sc_signal< sc_lv<9> > p_243_cast_fu_130_p1;
    sc_signal< sc_lv<9> > p_251_cast_fu_190_p1;
    sc_signal< sc_lv<7> > tmp_2_fu_200_p4;
    sc_signal< sc_lv<8> > p_266_fu_210_p3;
    sc_signal< sc_lv<9> > p_267_cast_cast_fu_218_p1;
    sc_signal< sc_lv<9> > p_259_cast_cast_fu_144_p1;
    sc_signal< sc_lv<7> > tmp_5_fu_248_p4;
    sc_signal< sc_lv<8> > p_298_fu_258_p3;
    sc_signal< sc_lv<9> > p_299_cast_cast_fu_266_p1;
    sc_signal< sc_lv<9> > p_291_cast_cast_fu_158_p1;
    sc_signal< sc_lv<10> > p_252_cast_fu_276_p1;
    sc_signal< sc_lv<10> > tmp1_cast_fu_279_p1;
    sc_signal< sc_lv<8> > p_282_fu_288_p3;
    sc_signal< sc_lv<10> > p_283_cast_cast_fu_295_p1;
    sc_signal< sc_lv<10> > tmp4_cast_fu_299_p1;
    sc_signal< sc_lv<8> > p_274_fu_311_p3;
    sc_signal< sc_lv<11> > p_275_cast_fu_318_p1;
    sc_signal< sc_lv<11> > p_268_cast_fu_308_p1;
    sc_signal< sc_lv<11> > tmp2_fu_322_p2;
    sc_signal< sc_lv<11> > tmp3_cast_fu_328_p1;
    sc_signal< sc_lv<12> > p_307_cast_fu_337_p1;
    sc_signal< sc_lv<12> > p_300_cast_fu_340_p1;
    sc_signal< sc_lv<12> > p_308_fu_343_p2;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state7;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_30;
    static const sc_lv<32> ap_const_lv32_37;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_47;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_25;
    static const sc_lv<32> ap_const_lv32_28;
    static const sc_lv<32> ap_const_lv32_2E;
    static const sc_lv<32> ap_const_lv32_38;
    static const sc_lv<32> ap_const_lv32_3E;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00001001();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_exitcond_flatten_fu_114_p2();
    void thread_indvar_flatten_next_fu_120_p2();
    void thread_internal_ap_ready();
    void thread_p_238_fu_126_p1();
    void thread_p_243_cast_fu_130_p1();
    void thread_p_250_fu_182_p3();
    void thread_p_251_cast_fu_190_p1();
    void thread_p_252_cast_fu_276_p1();
    void thread_p_252_fu_194_p2();
    void thread_p_254_fu_134_p4();
    void thread_p_259_cast_cast_fu_144_p1();
    void thread_p_266_fu_210_p3();
    void thread_p_267_cast_cast_fu_218_p1();
    void thread_p_268_cast_fu_308_p1();
    void thread_p_268_fu_282_p2();
    void thread_p_274_fu_311_p3();
    void thread_p_275_cast_fu_318_p1();
    void thread_p_282_fu_288_p3();
    void thread_p_283_cast_cast_fu_295_p1();
    void thread_p_286_fu_148_p4();
    void thread_p_291_cast_cast_fu_158_p1();
    void thread_p_298_fu_258_p3();
    void thread_p_299_cast_cast_fu_266_p1();
    void thread_p_300_cast_fu_340_p1();
    void thread_p_300_fu_331_p2();
    void thread_p_307_cast_fu_337_p1();
    void thread_p_308_fu_343_p2();
    void thread_p_hw_input_stencil_stream_V_value_V_blk_n();
    void thread_p_hw_input_stencil_stream_V_value_V_read();
    void thread_p_mul_stencil_update_stream_V_value_V_blk_n();
    void thread_p_mul_stencil_update_stream_V_value_V_din();
    void thread_p_mul_stencil_update_stream_V_value_V_write();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp1_cast_fu_279_p1();
    void thread_tmp1_fu_222_p2();
    void thread_tmp2_fu_322_p2();
    void thread_tmp3_cast_fu_328_p1();
    void thread_tmp3_fu_302_p2();
    void thread_tmp4_cast_fu_299_p1();
    void thread_tmp4_fu_270_p2();
    void thread_tmp_1_fu_172_p4();
    void thread_tmp_2_fu_200_p4();
    void thread_tmp_5_fu_248_p4();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
