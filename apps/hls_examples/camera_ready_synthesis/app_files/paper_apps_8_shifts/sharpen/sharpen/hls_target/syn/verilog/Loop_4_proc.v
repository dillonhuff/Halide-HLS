// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_4_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        hw_output_V_value_V,
        hw_output_V_value_V_ap_vld,
        hw_output_V_value_V_ap_ack,
        hw_output_V_last_V,
        hw_output_V_last_V_ap_vld,
        hw_output_V_last_V_ap_ack,
        p_mul_stencil_stream_V_value_V_dout,
        p_mul_stencil_stream_V_value_V_empty_n,
        p_mul_stencil_stream_V_value_V_read,
        p_delayed_input_stencil_stream_V_value_V_dout,
        p_delayed_input_stencil_stream_V_value_V_empty_n,
        p_delayed_input_stencil_stream_V_value_V_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] hw_output_V_value_V;
output   hw_output_V_value_V_ap_vld;
input   hw_output_V_value_V_ap_ack;
output  [0:0] hw_output_V_last_V;
output   hw_output_V_last_V_ap_vld;
input   hw_output_V_last_V_ap_ack;
input  [31:0] p_mul_stencil_stream_V_value_V_dout;
input   p_mul_stencil_stream_V_value_V_empty_n;
output   p_mul_stencil_stream_V_value_V_read;
input  [31:0] p_delayed_input_stencil_stream_V_value_V_dout;
input   p_delayed_input_stencil_stream_V_value_V_empty_n;
output   p_delayed_input_stencil_stream_V_value_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg hw_output_V_value_V_ap_vld;
reg hw_output_V_last_V_ap_vld;
reg p_mul_stencil_stream_V_value_V_read;
reg p_delayed_input_stencil_stream_V_value_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    hw_output_V_value_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_307;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_307;
reg    hw_output_V_last_V_blk_n;
reg    p_mul_stencil_stream_V_value_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    p_delayed_input_stencil_stream_V_value_V_blk_n;
reg   [2:0] indvar_flatten_reg_94;
reg   [1:0] p_hw_output_y_scan_1_reg_105;
reg   [1:0] p_hw_output_x_scan_2_reg_116;
wire   [0:0] exitcond_flatten_fu_127_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_sig_ioackin_hw_output_V_value_V_ap_ack;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_307;
wire   [2:0] indvar_flatten_next_fu_133_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond6_fu_139_p2;
reg   [0:0] exitcond6_reg_316;
wire   [1:0] p_hw_output_x_scan_s_fu_145_p3;
reg   [1:0] p_hw_output_x_scan_s_reg_321;
wire   [0:0] tmp_3_mid1_fu_153_p2;
reg   [0:0] tmp_3_mid1_reg_326;
wire   [0:0] tmp_1_fu_159_p2;
reg   [0:0] tmp_1_reg_331;
wire   [1:0] p_hw_output_y_scan_s_fu_171_p3;
wire   [1:0] p_hw_output_x_scan_1_fu_179_p2;
wire   [7:0] p_435_fu_190_p1;
reg   [7:0] p_435_reg_346;
reg   [7:0] ap_reg_pp0_iter2_p_435_reg_346;
wire   [7:0] p_439_fu_214_p2;
reg   [7:0] p_439_reg_351;
reg   [7:0] ap_reg_pp0_iter2_p_439_reg_351;
reg   [3:0] tmp_12_reg_357;
reg   [3:0] tmp_13_reg_362;
wire   [0:0] tmp_last_V_fu_245_p2;
reg   [0:0] tmp_last_V_reg_367;
reg   [0:0] ap_reg_pp0_iter2_tmp_last_V_reg_367;
wire   [0:0] p_442_fu_251_p2;
reg   [0:0] p_442_reg_372;
wire   [0:0] p_444_fu_256_p2;
reg   [0:0] p_444_reg_377;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_flag00001001;
reg    ap_reg_ioackin_hw_output_V_value_V_ap_ack;
reg    ap_reg_ioackin_hw_output_V_last_V_ap_ack;
wire   [1:0] p_hw_output_y_scan_2_fu_165_p2;
wire   [3:0] p_s_fu_194_p4;
wire   [7:0] p_438_fu_204_p1;
wire   [7:0] p_443_fu_208_p2;
wire   [0:0] tmp_s_fu_240_p2;
wire   [0:0] tmp_3_mid2_fu_185_p3;
wire   [1:0] tmp_14_fu_270_p4;
wire   [1:0] tmp_15_fu_279_p3;
wire   [5:0] tmp_fu_261_p4;
wire   [5:0] tmp_5_cast_fu_286_p1;
wire   [5:0] p_447_fu_290_p3;
wire   [7:0] p_447_cast_fu_297_p1;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_reg_ioackin_hw_output_V_value_V_ap_ack = 1'b0;
#0 ap_reg_ioackin_hw_output_V_last_V_ap_ack = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter3) & (ap_reg_pp0_iter2_exitcond_flatten_reg_307 == 1'd0))) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == hw_output_V_last_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_last_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter3) & (ap_reg_pp0_iter2_exitcond_flatten_reg_307 == 1'd0))) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == hw_output_V_value_V_ap_ack))) begin
                ap_reg_ioackin_hw_output_V_value_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_127_p2))) begin
        indvar_flatten_reg_94 <= indvar_flatten_next_fu_133_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_94 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_127_p2))) begin
        p_hw_output_x_scan_2_reg_116 <= p_hw_output_x_scan_1_fu_179_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        p_hw_output_x_scan_2_reg_116 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_127_p2))) begin
        p_hw_output_y_scan_1_reg_105 <= p_hw_output_y_scan_s_fu_171_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        p_hw_output_y_scan_1_reg_105 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_307 <= exitcond_flatten_reg_307;
        exitcond_flatten_reg_307 <= exitcond_flatten_fu_127_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_exitcond_flatten_reg_307 <= ap_reg_pp0_iter1_exitcond_flatten_reg_307;
        ap_reg_pp0_iter2_p_435_reg_346 <= p_435_reg_346;
        ap_reg_pp0_iter2_p_439_reg_351 <= p_439_reg_351;
        ap_reg_pp0_iter2_tmp_last_V_reg_367 <= tmp_last_V_reg_367;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_127_p2))) begin
        exitcond6_reg_316 <= exitcond6_fu_139_p2;
        p_hw_output_x_scan_s_reg_321 <= p_hw_output_x_scan_s_fu_145_p3;
        tmp_1_reg_331 <= tmp_1_fu_159_p2;
        tmp_3_mid1_reg_326 <= tmp_3_mid1_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_307 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_435_reg_346 <= p_435_fu_190_p1;
        p_439_reg_351 <= p_439_fu_214_p2;
        tmp_12_reg_357 <= {{p_439_fu_214_p2[7:4]}};
        tmp_13_reg_362 <= {{p_443_fu_208_p2[7:4]}};
        tmp_last_V_reg_367 <= tmp_last_V_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_307))) begin
        p_442_reg_372 <= p_442_fu_251_p2;
        p_444_reg_377 <= p_444_fu_256_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_127_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_hw_output_V_value_V_ap_ack)) begin
        ap_sig_ioackin_hw_output_V_value_V_ap_ack = hw_output_V_value_V_ap_ack;
    end else begin
        ap_sig_ioackin_hw_output_V_value_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter3) & (ap_reg_pp0_iter2_exitcond_flatten_reg_307 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_hw_output_V_last_V_ap_ack))) begin
        hw_output_V_last_V_ap_vld = 1'b1;
    end else begin
        hw_output_V_last_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (ap_reg_pp0_iter2_exitcond_flatten_reg_307 == 1'd0))) begin
        hw_output_V_last_V_blk_n = hw_output_V_last_V_ap_ack;
    end else begin
        hw_output_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter3) & (ap_reg_pp0_iter2_exitcond_flatten_reg_307 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_hw_output_V_value_V_ap_ack))) begin
        hw_output_V_value_V_ap_vld = 1'b1;
    end else begin
        hw_output_V_value_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (ap_reg_pp0_iter2_exitcond_flatten_reg_307 == 1'd0))) begin
        hw_output_V_value_V_blk_n = hw_output_V_value_V_ap_ack;
    end else begin
        hw_output_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_307 == 1'd0))) begin
        p_delayed_input_stencil_stream_V_value_V_blk_n = p_delayed_input_stencil_stream_V_value_V_empty_n;
    end else begin
        p_delayed_input_stencil_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_307 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_delayed_input_stencil_stream_V_value_V_read = 1'b1;
    end else begin
        p_delayed_input_stencil_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_307 == 1'd0))) begin
        p_mul_stencil_stream_V_value_V_blk_n = p_mul_stencil_stream_V_value_V_empty_n;
    end else begin
        p_mul_stencil_stream_V_value_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_307 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_mul_stencil_stream_V_value_V_read = 1'b1;
    end else begin
        p_mul_stencil_stream_V_value_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_127_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_127_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_flatten_reg_307 == 1'd0) & (1'b0 == p_mul_stencil_stream_V_value_V_empty_n)) | ((exitcond_flatten_reg_307 == 1'd0) & (1'b0 == p_delayed_input_stencil_stream_V_value_V_empty_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_flatten_reg_307 == 1'd0) & (1'b0 == p_mul_stencil_stream_V_value_V_empty_n)) | ((exitcond_flatten_reg_307 == 1'd0) & (1'b0 == p_delayed_input_stencil_stream_V_value_V_empty_n)))) | ((1'b1 == ap_enable_reg_pp0_iter3) & (1'b1 == ap_block_state5_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_flatten_reg_307 == 1'd0) & (1'b0 == p_mul_stencil_stream_V_value_V_empty_n)) | ((exitcond_flatten_reg_307 == 1'd0) & (1'b0 == p_delayed_input_stencil_stream_V_value_V_empty_n)))) | ((1'b1 == ap_enable_reg_pp0_iter3) & (1'b1 == ap_block_state5_io)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((exitcond_flatten_reg_307 == 1'd0) & (1'b0 == p_mul_stencil_stream_V_value_V_empty_n)) | ((exitcond_flatten_reg_307 == 1'd0) & (1'b0 == p_delayed_input_stencil_stream_V_value_V_empty_n)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((ap_reg_pp0_iter2_exitcond_flatten_reg_307 == 1'd0) & (1'b0 == ap_sig_ioackin_hw_output_V_value_V_ap_ack));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond6_fu_139_p2 = ((p_hw_output_x_scan_2_reg_116 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_127_p2 = ((indvar_flatten_reg_94 == 3'd4) ? 1'b1 : 1'b0);

assign hw_output_V_last_V = ap_reg_pp0_iter2_tmp_last_V_reg_367;

assign hw_output_V_value_V = (p_447_cast_fu_297_p1 + ap_reg_pp0_iter2_p_435_reg_346);

assign indvar_flatten_next_fu_133_p2 = (indvar_flatten_reg_94 + 3'd1);

assign p_435_fu_190_p1 = p_delayed_input_stencil_stream_V_value_V_dout[7:0];

assign p_438_fu_204_p1 = p_s_fu_194_p4;

assign p_439_fu_214_p2 = (p_435_fu_190_p1 - p_438_fu_204_p1);

assign p_442_fu_251_p2 = ((tmp_12_reg_357 != 4'd0) ? 1'b1 : 1'b0);

assign p_443_fu_208_p2 = (p_438_fu_204_p1 - p_435_fu_190_p1);

assign p_444_fu_256_p2 = ((tmp_13_reg_362 != 4'd0) ? 1'b1 : 1'b0);

assign p_447_cast_fu_297_p1 = p_447_fu_290_p3;

assign p_447_fu_290_p3 = ((p_442_reg_372[0:0] === 1'b1) ? tmp_fu_261_p4 : tmp_5_cast_fu_286_p1);

assign p_hw_output_x_scan_1_fu_179_p2 = (2'd1 + p_hw_output_x_scan_s_fu_145_p3);

assign p_hw_output_x_scan_s_fu_145_p3 = ((exitcond6_fu_139_p2[0:0] === 1'b1) ? 2'd0 : p_hw_output_x_scan_2_reg_116);

assign p_hw_output_y_scan_2_fu_165_p2 = (2'd1 + p_hw_output_y_scan_1_reg_105);

assign p_hw_output_y_scan_s_fu_171_p3 = ((exitcond6_fu_139_p2[0:0] === 1'b1) ? p_hw_output_y_scan_2_fu_165_p2 : p_hw_output_y_scan_1_reg_105);

assign p_s_fu_194_p4 = {{p_mul_stencil_stream_V_value_V_dout[7:4]}};

assign tmp_14_fu_270_p4 = {{ap_reg_pp0_iter2_p_439_reg_351[3:2]}};

assign tmp_15_fu_279_p3 = ((p_444_reg_377[0:0] === 1'b1) ? tmp_14_fu_270_p4 : 2'd0);

assign tmp_1_fu_159_p2 = ((p_hw_output_y_scan_1_reg_105 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_3_mid1_fu_153_p2 = ((p_hw_output_y_scan_1_reg_105 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_3_mid2_fu_185_p3 = ((exitcond6_reg_316[0:0] === 1'b1) ? tmp_3_mid1_reg_326 : tmp_1_reg_331);

assign tmp_5_cast_fu_286_p1 = tmp_15_fu_279_p3;

assign tmp_fu_261_p4 = {{ap_reg_pp0_iter2_p_439_reg_351[7:2]}};

assign tmp_last_V_fu_245_p2 = (tmp_s_fu_240_p2 & tmp_3_mid2_fu_185_p3);

assign tmp_s_fu_240_p2 = ((p_hw_output_x_scan_s_reg_321 == 2'd1) ? 1'b1 : 1'b0);

endmodule //Loop_4_proc
